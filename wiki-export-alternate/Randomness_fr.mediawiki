<languages />
Le hasard permet d'introduire rapidement de la variété et du caractère dans nos patterns.


<syntaxhighlight lang="Haskell" inline>sometimes</syntaxhighlight> fonctionne un peu comme <syntaxhighlight lang="Haskell" inline>every</syntaxhighlight>, mais au lieu de se produire de façon certaine après un certain intervalle de temps, ici, notre transformation n'aura qu'une chance aléatoire d'avoir lieu.

<syntaxhighlight lang="Haskell">
d1 $ sometimes (# speed "2") $ sound "drum*8"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>often</syntaxhighlight> fonctionne comme  <syntaxhighlight lang="Haskell" inline>sometimes</syntaxhighlight> mais se produit plus fréquemment.

<syntaxhighlight lang="Haskell">
d1 $ often (# speed "2") $ sound "drum*8"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>irand</syntaxhighlight> génère un nombre intégral aléatoire, dans l'intervalle précisé :

<syntaxhighlight lang="Haskell">
d1 $ sound "arpy(3,8)" # n (irand 16)
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>rand</syntaxhighlight> génère un nombre décimal aléatoire entre 0 et 1.

<syntaxhighlight lang="Haskell">
d1 $ sound "tink*16" # gain rand
</syntaxhighlight>

Vous pouvez utiliser <syntaxhighlight lang="Haskell" inline>degradeBy</syntaxhighlight> pour supprimer aléatoirement certains événements.  Le nombre indique la chance qu'à la sample d'être lue.

<syntaxhighlight lang="Haskell">
d1 $ degradeBy 0.2 $ sound "tink*16"
</syntaxhighlight>

(<syntaxhighlight lang="Haskell" inline>degrade</syntaxhighlight> est identique à  <syntaxhighlight lang="Haskell" inline>degradeBy 0.5</syntaxhighlight>)

Vous pouvez également utiliser ? pour indiquer que la sample à 50% de chance d'être ou de ne pas être jouée.

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sn:2? bd sn?"
</syntaxhighlight>