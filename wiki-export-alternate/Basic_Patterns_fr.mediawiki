<languages />

Voici la ligne de code la plus élémentaire pour produire du son avec Tidal Cycles :

<syntaxhighlight lang="Haskell">
d1 $ sound "drum"
</syntaxhighlight>

Vous pouvez stopper la lecture d'un son en utilisant <syntaxhighlight lang="Haskell" inline>silence</syntaxhighlight>:

<syntaxhighlight lang="Haskell">
d1 $ silence
</syntaxhighlight>

Choisissez un son différent au sein d'un même jeu de samples (dossier) à l'aide de `:`


<syntaxhighlight lang="Haskell">
d1 $ sound "drum:1"
</syntaxhighlight>

Une partie des samples pré-installés avec Tidal sont listés ci-dessous. Essayez-les !


<pre>
flick sid can metal future gabba sn mouth co gretsch mt arp h cp
cr newnotes bass hc tabla bass0 hh bass1 bass2 oc bass3 ho odx
diphone2 house off ht tink perc bd industrial pluck trump printshort
jazz voodoo birds3 procshort blip drum jvbass psr wobble drumtraks koy
rave bottle kurt latibro rm sax lighter lt arpy feel less stab ul
</pre>

Vous pouvez connaître la liste des samples (ou ajouter les vôtres) en explorant le dossier "Dirt-samples". Vous pouvez y accéder rapidement en utilisant le menu de SuperCollider : 
'File > Open user support directory > downloaded-quarks >
Dirt-Samples'.

== Construire un pattern ==

<syntaxhighlight lang="Haskell">
d1 $ sound "bd hh sn hh"
</syntaxhighlight>

Plus il y aura de steps dans votre pattern, plus celui-ci aura tendance à accélérer en proportion.

<syntaxhighlight lang="Haskell">
d1 $ sound "bd bd hh bd sn bd hh bd"
</syntaxhighlight>

Ceci s'explique par la manière spécifique qu'à Tidal Cycles de gérer le temps. Il existe un 'cycle' universel (une sorte de mesure) qui est perpétuellement jouée en boucle par l'ordinateur. Tidal jouera tout les sons situés entre les guillemets au cours du cycle, tant qu'on ne lui donnera pas l'indication contraire. Vous apprendrez à lui donner cette indication plus tard. 

Vous remarquerez également que chaque son sera toujours espacé de manière égale au cours du cycle. Ceci nous permet de générer des polyrythmies !

<div class="mw-translate-fuzzy">
Nous pouvons changer la longueur du cycle en spécifiant le `cps` (cycles per second). Vous remarquerez que cette appellation est quelque peu similaire au plus classique "bpm" (beats per minute).
</div>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
cps 0.6
</syntaxhighlight>
</div>

Vous pouvez utiliser d1, d2, d3 ... d9 pour jouer plusieurs séquences en même temps.

<syntaxhighlight lang="Haskell">
d2 $ sound "sn sn:2 sn bd sn"
</syntaxhighlight>

Vous pouvez stopper tous les patterns en cours de lecture avec <syntaxhighlight lang="Haskell" inline>hush</syntaxhighlight>.

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
`hush`
</syntaxhighlight>
</div>

Vous pouvez mettre en pause tout les patterns en donnant à votre cycle une valeur négative. Attention, il faut toujours spécifier les nombres négatifs entre guillemets.

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
cps (-1)
</syntaxhighlight>
</div>

Démarrez le cycle à nouveau en spécifiant une valeur positive :

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
cps 0.6
</syntaxhighlight>
</div>

<div class="mw-translate-fuzzy">
Vous pouvez choisir d'isoler un pattern avec `solo`. Attention, il est impossible d'annuler cette fonction (... mais ce sera le cas dans une version ultérieure de Tidal) !
</div>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
d1 $ sound "arpy cp arpy:2"
d2 $ sound "sn sn:2 bd sn"
solo $ d2 $ sound "sn sn:2 bd sn"
</syntaxhighlight>
</div>

d2 $ sound "sn sn:2 bd sn"

solo 2

-- now only the second pattern will be playing

unsolo 2

-- now both will be playing, again
</syntaxhighlight>

Ajoutons un peu de variété à nos patterns.

Ajouter un silence, une pause ou un soupir avec <syntaxhighlight lang="Haskell" inline>~</syntaxhighlight> :

<syntaxhighlight lang="Haskell">
d1 $ sound "bd ~ sn:3 bd sn:5 ~ bd:2 sn:2"
</syntaxhighlight>

Vous pouvez ajouter un sous-pattern en le spécifiant entre crochets droits :

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
d1 $ sound "bd [bd cp] bd bd"
<syntaxhighlight>
</div>

Cette fonctionnalité permet d'obtenir des mesures rythmiques plus flexibles :

<syntaxhighlight lang="Haskell">
d1 $ sound "[bd bd sn:5] [bd sn:3]"
</syntaxhighlight>

Vous pouvez encore ajouter des sous-patterns au sein même des sous-patterns :

<syntaxhighlight lang="Haskell">
d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"
</syntaxhighlight>

Et ainsi de suite...

<syntaxhighlight lang="Haskell">
d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"
</syntaxhighlight>

Vous pouvez répéter un step avec <syntaxhighlight lang="Haskell" inline>*</syntaxhighlight> :

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sd*2"
</syntaxhighlight>

Ceci fonctionne également pour les sous-patterns :

<syntaxhighlight lang="Haskell">
d1 $ sound "bd [sd cp]*2"
</syntaxhighlight>

Vous pouvez au contraire ralentir un step en utilisant : <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight> :

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sn/2"
</syntaxhighlight>

<syntaxhighlight lang="Haskell">
d1 $ sound "bd [sn cp]/2"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>*</syntaxhighlight> accélère un pas, ce qui revient à le jouer x fois.  <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight> ralentit un pas, ce qui revient à le jouer x fois moins.

Nous pouvons aussi préparer des patterns qui seront joués lors d'un cycle ultérieur en utilisant  <syntaxhighlight lang="Haskell" inline><</syntaxhighlight> et <syntaxhighlight lang="Haskell" inline>></syntaxhighlight> :

<syntaxhighlight lang="Haskell">
d1 $ sound "bd <sd cp arpy>"
</syntaxhighlight>

<syntaxhighlight lang="Haskell">
d1 $ sound "<bd sn> <sd [cp cp]> <bd [cp cp]>"
</syntaxhighlight>

== Effets ==

Tidal intègre un grand nombre d'effets que nous pouvons utiliser pour modifier le rendu d'un pattern ou d'une séquence : 

<syntaxhighlight lang="Haskell" inline>vowel</syntaxhighlight> est un filtre formant qui permet d'obtenir le son d'une voyelle. Essayez : a, e, i, o et u.

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a"
</syntaxhighlight>

Nous pouvons créer des patterns d'effets de la même manière que nous créons des patterns de son. Il est de coutume d'appeler ces effets et ces patterns de son des "patterns de contrôle".

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o e e"
</syntaxhighlight>

Rappelez-vous qu'il est possible d'utiliser "<>" pour planifier à travers le pattern.

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "<a o e e>"
</syntaxhighlight>

Vous pouvez ajouter une consonne pour stopper l'effet de voyelle.

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o p p"
</syntaxhighlight>

Tidal fait du mieux qu'il peut pour répartir équitablement les patterns (sons, effets).

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o e"
</syntaxhighlight>

La structure du pattern est toujours indiquée par l'élément indiqué en début de ligne. Essayez par exemple d'inverser les paramètres :

<syntaxhighlight lang="Haskell">
d1 $ vowel "a o ~ i" # sound "drum" 
</syntaxhighlight>

"ATTENTION" — Dans les prochaines versions de Tidal, vous serez en mesure de contrôler quel élément donne la structure, ou de combiner des structures.

<syntaxhighlight lang="Haskell" inline>gain</syntaxhighlight> modifie l'amplitude des différents sons.

<syntaxhighlight lang="Haskell">
d1 $ sound "bd hh sn:1 hh sn:1 hh" # gain "1 0.7 0.5"
</syntaxhighlight>


<syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> et <syntaxhighlight lang="Haskell" inline>note</syntaxhighlight> sont utilisées pour modifier la hauteur des samples (le pitch).

<syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> affecte la vitesse de lecture de la sample. Puisque 2 jouera le sample deux fois plus rapidement, la hauteur du sample joué sera une octave plus haut.

<syntaxhighlight lang="Haskell">
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "1 1.5 2 0.5"
</syntaxhighlight>

Nous pouvons aussi utiliser <syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> pour définir le pattern :

<syntaxhighlight lang="Haskell">
d1 $ speed "1 2 4" # sound "jungbass:6"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>note</syntaxhighlight> permet de modifier la hauteur du sample un demi-ton par demi-ton. 12 sera donc ici une octave.

<syntaxhighlight lang="Haskell">
d1 $ up "0 ~ 12 24" # sound "jungbass:6"
</syntaxhighlight>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell" inline>Pan</syntaxhighlight> permet de créer un effet stéréo :  - 0 = son dans le moniteur gauche, 0.5 = son centré, 1 = son dans le moniteur droit.
</div>

<syntaxhighlight lang="Haskell">
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "0 0.5 1"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>shape</syntaxhighlight> ajoute de la distorsion. Attention, cela augmente drastiquement le volume.

<syntaxhighlight lang="Haskell">
d1 $ sound "kurt:4 kurt:4" # shape "0 0.78" # gain "0.7"
</syntaxhighlight>


== Êtes-vous courageux ? ==

<div class="mw-translate-fuzzy">
Essayez plus d'effets : http://tidalcycles.org/patterns.html#effects
</div>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell" inline>delay</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>delaytime</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>delayfeedback</syntaxhighlight> /
syntaxhighlight lang="Haskell" inline>cutoff</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>resonance</syntaxhighlight> /
<syntaxhighlight lang="Haskell" inline>room</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>size</syntaxhighlight>
</div>

== Patterns continus ==

<syntaxhighlight lang="Haskell" inline>sine</syntaxhighlight> est un pattern continu qui suit les valeurs d'une oscillation sinusoïdale de 0 à 1, et de 1 à 0, etc..

<syntaxhighlight lang="Haskell">
d1 $ sound "bd*32" # gain sine
</syntaxhighlight>

Vous pouvez aussi essayer <syntaxhighlight lang="Haskell" inline>tri</syntaxhighlight>, <syntaxhighlight lang="Haskell" inline>saw</syntaxhighlight> et <syntaxhighlight lang="Haskell" inline>rand</syntaxhighlight>.