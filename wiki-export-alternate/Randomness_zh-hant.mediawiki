<languages />
隨機性(Randomness)的加入能讓我們的pattern迅速引入一點變奏感和特色。


<syntaxhighlight lang="Haskell" inline>sometimes</syntaxhighlight> 的作用與 <syntaxhighlight lang="Haskell" inline>every</syntaxhighlight>相近，與之不同的是sometimes每個循環都有機會隨機地觸發，而不是在固定的循環後觸發。

<syntaxhighlight lang="Haskell">
d1 $ sometimes (# speed "2") $ sound "drum*8"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>often</syntaxhighlight> 的作用也與<syntaxhighlight lang="Haskell" inline>sometimes</syntaxhighlight> 相同，但發生的機率更高!

<syntaxhighlight lang="Haskell">
d1 $ often (# speed "2") $ sound "drum*8"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>irand</syntaxhighlight> 能夠生成一個隨機的整數，其值不超過給定的數值。舉個例子:用來播放音源，隨機選擇。

<syntaxhighlight lang="Haskell">
d1 $ sound "arpy(3,8)" # n (irand 16)
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>rand</syntaxhighlight> 則產生0~1之間的小數。

<syntaxhighlight lang="Haskell">
d1 $ sound "tink*16" # gain rand
</syntaxhighlight>

你可以用<syntaxhighlight lang="Haskell" inline>degradeBy</syntaxhighlight> 隨機地移除一些聲音。輸入0~1之間的數值，越小則音源被刪去的機率越小。

<syntaxhighlight lang="Haskell">
d1 $ degradeBy 0.2 $ sound "tink*16"
</syntaxhighlight>

(<syntaxhighlight lang="Haskell" inline>degrade</syntaxhighlight>與<syntaxhighlight lang="Haskell" inline>degradeBy 0.5</syntaxhighlight>)相同。

或著你可以用<syntaxhighlight lang="Haskell" inline>?</syntaxhighlight>去除聲音單元或結構，同樣也是一半機率。

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sn:2? bd sn?"
</syntaxhighlight>