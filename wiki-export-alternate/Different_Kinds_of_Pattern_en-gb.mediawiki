<languages />
What ''is'' pattern, anyway?

Let's think about some different kinds of pattern and how Tidal can represent them

== Cyclic / repetitive ==

We can use <syntaxhighlight lang="Haskell" inline>n</syntaxhighlight> to choose samples from a folder, this allows us to apply patterns there too!

<syntaxhighlight lang="Haskell">
d1 $ n "0 1 2 3" # sound "arpy"
</syntaxhighlight>


<syntaxhighlight lang="Haskell" inline>Run</syntaxhighlight> is a short way of writing out sequential patterns

<syntaxhighlight lang="Haskell">
d1 $ n (run 4) # sound "arpy"
</syntaxhighlight>

or we can use <syntaxhighlight lang="Haskell" inline>..</syntaxhighlight>

<syntaxhighlight lang="Haskell">
d1 $ n "0..4" # sound "arpy"
</syntaxhighlight>

== Symmetry ==

<syntaxhighlight lang="Haskell" >
d1 $ slow 2 $ n "0 1 2 3 3 2 1 0" # sound "arpy"
d1 $ palindrome $ n (run 4) # sound "arpy"
</syntaxhighlight>

== Polymetric / polyrhythmic sequences ==

Play two subsequences at once by using square brackets (sort of like one big subsequence!) separating with a comma:

<syntaxhighlight lang="Haskell">
d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"
</syntaxhighlight>

If you use curly brackets instead of square you get a different effect.
With square brackets both halves of the sequence are fitted into the cycle (polyrhythm).
With curly brackets the pulse is set by the left hand pattern.
The right hand pattern can then overlap (or underlap!) (polymeter).

<syntaxhighlight lang="Haskell">
d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"
d1 $ sound "{voodoo voodoo:3, arpy arpy:4 arpy:2}"
d1 $ sound "[drum bd hh bd, can can:2 can:3 can:4 can:2]"
d1 $ sound "{drum bd hh bd, can can:2 can:3 can:4 can:2}"
d1 $ sound "[bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5]"
d1 $ sound "{bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5}"
</syntaxhighlight>

== Euclidian rhythm/Bjorklund ==

If you give two numbers in brackets after an element in a pattern,
then Tidal will try to distribute the first number of sounds equally across the second number of steps.

<syntaxhighlight lang="Haskell">
d1 $ sound "bd(5,8)"
</syntaxhighlight>

You can use this notation within a single element of a pattern:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd(3,8) sn*2"
d1 $ sound "bd(3,8) sn(5,8)"
</syntaxhighlight>

You can also add a third parameter, which ‘rotates’ the pattern so it starts on a different step:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd(5,8,2)"
</syntaxhighlight>