<languages />
<translate>
<!--T:1-->
We can start to make much more complex patterns using transformations 

<!--T:2-->
Using functions like <syntaxhighlight lang="haskell" inline>slow</syntaxhighlight> you can start to transcend the cycle

<!--T:3-->
<syntaxhighlight lang="haskell" inline>slow</syntaxhighlight> stretches the pattern over more cycles

<!--T:4-->
<syntaxhighlight lang="haskell">
d1 $ sound "arpy arpy:1 arpy:2 arpy:3"

<!--T:5-->
d1 $ slow 2 $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:6-->
<syntaxhighlight lang="haskell" inline>fast</syntaxhighlight> squashes the pattern into less than one cycle

<!--T:7-->
You might also see people writing <syntaxhighlight lang="haskell" inline>density</syntaxhighlight> - it’s the same thing!

<!--T:8-->
<syntaxhighlight lang="haskell" inline>fast 0.5</syntaxhighlight> is the same as <syntaxhighlight lang="haskell" inline>slow 2</syntaxhighlight>!

<!--T:9-->
<syntaxhighlight lang="haskell">
d1 $ fast 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

<!--T:10-->
d1 $ fast 0.5 $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:11-->
<syntaxhighlight lang="haskell" inline>hurry</syntaxhighlight> is similar to fast, but also applies a speed transformation

<!--T:12-->
<syntaxhighlight lang="haskell">
d1 $ sound "arpy arpy arpy:1 arpy:2"

<!--T:13-->
d1 $ hurry 2 $ sound "arpy arpy arpy:1 arpy:2"

<!--T:14-->
d1 $ hurry 0.5 $ sound "arpy arpy arpy:1 arpy:2"
</syntaxhighlight>

<!--T:15-->
You can reverse a pattern with ‘rev’

<!--T:16-->
<syntaxhighlight lang="haskell">
d1 $ rev $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:17-->
Or play it forwards and then backwards with ‘palindrome’

<!--T:18-->
<syntaxhighlight lang="haskell">
d1 $ palindrome $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:19-->
<syntaxhighlight lang="haskell" inline>iter</syntaxhighlight> starts the pattern at a different point each cycle, shifting it the given number of times until it gets back to where it started

<!--T:20-->
<syntaxhighlight lang="haskell">
d1 $ iter 4 $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>


<!--T:21-->
<syntaxhighlight lang="haskell" inline>every</syntaxhighlight> allows us to schedule transformations or effects in different cycles
e.g. every fourth cycle, play twice as fast:

<!--T:22-->
<syntaxhighlight lang="haskell">
d1 $ every 4 (fast 2) $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:23-->
... or you could schedule an effect in the same way, using <syntaxhighlight lang="haskell" inline>#</syntaxhighlight>

<!--T:24-->
<syntaxhighlight lang="haskell">
d1 $ every 4 (# vowel "a o") $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:25-->
<syntaxhighlight lang="haskell" inline>jux</syntaxhighlight> (short for 'juxtapose') takes a transformation or an effect and plays it in one speaker the original pattern plays in the other speaker.

<!--T:26-->
<syntaxhighlight lang="haskell">
d1 $ sound "arpy arpy:1 arpy:2 arpy:3"
d1 $ jux (rev) $ sound "arpy arpy:1 arpy:2 arpy:3"
d1 $ jux (hurry 2) $ sound "arpy arpy arpy:1 arpy:2"
</syntaxhighlight>

<!--T:27-->
<syntaxhighlight lang="haskell" inline>chunk</syntaxhighlight> applies a transformation or an effect to a different part of the pattern each time. For example with <syntaxhighlight lang="haskell" inline>4</syntaxhighlight> as a parameter, it will step through each quarter of the cycle.

<!--T:28-->
<syntaxhighlight lang="haskell">
d1 $ chunk 4 (hurry 2) $ sound  "arpy arpy:1 arpy:2 arpy:3"
d1 $ chunk 4 (# speed 2) $ sound  "alphabet:0 alphabet:1 alphabet:2 alphabet:3"
</syntaxhighlight>

== Feeling brave? == <!--T:29-->

<!--T:30-->
More than one transformation is possible! You can chain them together using <syntaxhighlight lang="haskell" inline>.</syntaxhighlight>

<!--T:31-->
<syntaxhighlight lang="haskell">
d1 $ jux (rev . (slow 1.5)) $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<!--T:32-->
Remember that (almost) everything is a pattern so we can apply these transformations to our effects too!

<!--T:33-->
<syntaxhighlight lang="haskell">
d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # note "1 [3 5] 7"
d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # iter 3 (note "1 [3 5] 7")
</syntaxhighlight>

<!--T:34-->
What about slowing down or scaling sine and saw?
</translate>