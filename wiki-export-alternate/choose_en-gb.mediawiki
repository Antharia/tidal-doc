{{DISPLAYTITLE:choose}} 
[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>choose :: [a] -> Pattern a</syntaxhighlight>

<div class="mw-translate-fuzzy">
The '''choose''' function emits a stream of randomly choosen values from the given list, as a [[Continuous patterns|continuous]] pattern.
</div> 

<source>
d1 $ sound "drum ~ drum drum" # n (choose [0,2,3])
</source>

<div class="mw-translate-fuzzy">
As with all [[continuous patterns]], you have to be careful to give them structure; in this case '''chooose''' gives you an infinitely detailed stream of random choices.
</div>

= chooseBy =
[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>chooseBy :: Pattern Double -> [a] -> Pattern a</syntaxhighlight>

The '''chooseBy''' function is like [[choose]] but instead of selecting elements of the list randomly, it uses the given pattern to select elements.

<source>
chooseBy "0 0.25 0.5" ["a","b","c","d"]
</source>

will result in the pattern '''"a b c"'''

= wchoose =

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>wchoose :: [(a, Double)] -> Pattern a</syntaxhighlight>

'''wchoose''' is similar to [[choose]], but allows you to 'weight' the choices, so some are more likely to be chosen than others. The following is similar to the previous example, but the 2 is twice as likely to be chosen than the 0 or 3.

<div class="mw-translate-fuzzy">
<source>
d1 $ sound "drum ~ drum drum" # n (wchoose [(0,0.25,(2,0.5),(3,0.25)])
</source>
</div>

''Note: prior to version 1.0.0 of tidal, the weights had to add up to 1, but this is no longer the case.''

= wchooseBy =
[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>wchooseBy :: Pattern Double -> [(a,Double)] -> Pattern a </syntaxhighlight>

The '''wchooseBy''' function is like [[wchoose]] but instead of selecting elements of the list randomly, it uses the given pattern to select elements.

[[Category:Functions]]
[[Category:Randomness and chance]]