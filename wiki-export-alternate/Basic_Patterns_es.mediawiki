<languages />

El formato básico para hacer sonido en Tidal se ve así

<syntaxhighlight lang="Haskell">
d1 $ sound "drum"
</syntaxhighlight>

Puedes dejar de hacer sonido usando <syntaxhighlight lang="Haskell" inline>silence</syntaxhighlight>:

<syntaxhighlight lang="Haskell">
d1 $ silence
</syntaxhighlight>

Elije un sonido diferente del mismo conjunto, con `:`

<syntaxhighlight lang="Haskell">
d1 $ sound "drum:1"
</syntaxhighlight>

Algunas de las muestras que vienen con Tidal se listan debajo. Pruébalas!

<pre>
flick sid can metal future gabba sn mouth co gretsch mt arp h cp
cr newnotes bass hc tabla bass0 hh bass1 bass2 oc bass3 ho odx
diphone2 house off ht tink perc bd industrial pluck trump printshort
jazz voodoo birds3 procshort blip drum jvbass psr wobble drumtraks koy
rave bottle kurt latibro rm sax lighter lt arpy feel less stab ul
</pre>

Puedes ver qué otros sonidos hay (o agregar los tuyos) mirando en la carpeta 'Dirt-Samples'. La puedes encontrar a través del menú de Supercollider: 'File > Open user support directory > downloaded-quarks > Dirt-Samples'.

== Haz una secuencia ==

<syntaxhighlight lang="Haskell">
d1 $ sound "bd hh sn hh"
</syntaxhighlight>

Cuantos más pasos haya en la secuencia, más rápido va a ir:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd bd hh bd sn bd hh bd"
</syntaxhighlight>

Esto se debe a la forma en que Tidal maneja el tiempo. Hay un "ciclo" universal (parecido a una 'barra' musical) que siempre está corriendo. Tidal reproducirá todos los sonidos entre las comillas durante 1 ciclo, a menos que le indiquemos que no lo haga (aprenderemos cómo hacerlo más adelante). También notarás que Tidal espaciará los sonidos de manera uniforme dentro del ciclo, lo que significa que podemos terminar con estructuras polirrítmicas (más sobre éstas más adelante).

<div class="mw-translate-fuzzy">
Podemos cambiar la duración del ciclo usando `cps` (ciclos por segundo) - esto es un poco como bpm (tiempos por minuto).
</div>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
cps 0.6
</syntaxhighlight>
</div>

Puedes usar d1, d2, d3 ... d9 para reproducir múltiples secuencias al mismo tiempo.

<syntaxhighlight lang="Haskell">
d2 $ sound "sn sn:2 sn bd sn"
</syntaxhighlight>

Puede detener todos los patrones en ejecución con <syntaxhighlight lang="Haskell" inline>hush</syntaxhighlight>.

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
`hush`
</syntaxhighlight>
</div>

Puedes pausar todo cambiando la duración del ciclo a un número negativo (recuerda poner números negativos entre paréntesis).

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
cps (-1)
</syntaxhighlight>
</div>

Ponlo en marcha de nuevo con un número positivo.

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
cps 0.6
</syntaxhighlight>
</div>

<div class="mw-translate-fuzzy">
O puedes hacer un 'solo' con un canal, pero ten cuidado, no puedes revertirlo ('unsolo'... ¡pero esto viene a la próxima versión de tidal!)
</div>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
d1 $ sound "arpy cp arpy:2"
d2 $ sound "sn sn:2 bd sn"
solo $ d2 $ sound "sn sn:2 bd sn"
</syntaxhighlight>
</div>

d2 $ sound "sn sn:2 bd sn"

solo 2

-- now only the second pattern will be playing

unsolo 2

-- now both will be playing, again
</syntaxhighlight>

Vamos a añadir un poco más de variedad a nuestras secuencias.

Añade un silencio con <syntaxhighlight lang="Haskell" inline>~</syntaxhighlight>:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd ~ sn:3 bd sn:5 ~ bd:2 sn:2"
</syntaxhighlight>

Ajusta una subsecuencia en un paso usando corchetes:

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell">
d1 $ sound "bd [bd cp] bd bd"
<syntaxhighlight>
</div>

Esto te permite tener métricas de tiempo flexibles:

<syntaxhighlight lang="Haskell">
d1 $ sound "[bd bd sn:5] [bd sn:3]"
</syntaxhighlight>

Puedes poner subsecuencias dentro de subsecuencias:

<syntaxhighlight lang="Haskell">
d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"
</syntaxhighlight>

Sigue...

<syntaxhighlight lang="Haskell">
d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"
</syntaxhighlight>

Puedes repetir un paso con <syntaxhighlight lang="Haskell" inline>*</syntaxhighlight>:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sd*2"
</syntaxhighlight>

Esto funciona con subsecuencias también:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd [sd cp]*2"
</syntaxhighlight>

O puedes hacer lo contrario usando <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight>:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sn/2"
</syntaxhighlight>

<syntaxhighlight lang="Haskell">
d1 $ sound "bd [sn cp]/2"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>*</syntaxhighlight> funciona 'acelerando' un paso para reproducirlo multiples veces. <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight> funciona 'ralentizandolo'.

También podemos programar patrones entre ciclos utilizando <syntaxhighlight lang="Haskell" inline><</syntaxhighlight> y <syntaxhighlight lang="Haskell" inline>></syntaxhighlight>:

<syntaxhighlight lang="Haskell">
d1 $ sound "bd <sd cp arpy>"
</syntaxhighlight>

<syntaxhighlight lang="Haskell">
d1 $ sound "<bd sn> <sd [cp cp]> <bd [cp cp]>"
</syntaxhighlight>

== Efectos ==

Tidal tiene muchos efectos que podemos usar para cambiar la forma en que las cosas suenan. 

<syntaxhighlight lang="Haskell" inline>vowel</syntaxhighlight> es un filtro que agrega un sonido de vocal. Prueba a, e, i, o y u

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a"
</syntaxhighlight>

Creamos patrones de efectos de la misma manera que creamos patrones de sonidos. A estos patrones de efectos y sonidos los llamamos 'patrones de control'. Asi que

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o e e"
</syntaxhighlight>

Recuerda que podemos usar "<>" para programar a través de ciclos.

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "<a o e e>"
</syntaxhighlight>

Puedes agregar una letra que no sea de vocal para pausar el efecto de vocal.

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o p p"
</syntaxhighlight>

Tidal hace todo lo posible para mapear patrones entre sí.

<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o e"
</syntaxhighlight>

La estructura viene de la izquierda - intenta intercambiar los parámetros

<syntaxhighlight lang="Haskell">
d1 $ vowel "a o ~ i" # sound "drum" 
</syntaxhighlight>

'''Advertencia de salud''': este es uno de los cambios que se producirán en el nuevo Tidal: podrás controlar de qué lado proviene la estructura. O combinar la estructura desde ''ambos'' lados.

<syntaxhighlight lang="Haskell" inline>gain</syntaxhighlight> cambia el volumen de diferentes sonidos.

<syntaxhighlight lang="Haskell">
d1 $ sound "bd hh sn:1 hh sn:1 hh" # gain "1 0.7 0.5"
</syntaxhighlight>


<syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> y <syntaxhighlight lang="Haskell" inline>note</syntaxhighlight> se utilizan para cambiar el tono de las muestras.

<syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> afecta la velocidad de reproducción, por ejemplo, 2 = una octava arriba

<syntaxhighlight lang="Haskell">
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "1 1.5 2 0.5"
</syntaxhighlight>

O podemos tomar el patrón del parámetro <syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight>

<syntaxhighlight lang="Haskell">
d1 $ speed "1 2 4" # sound "jungbass:6"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>note</syntaxhighlight> aumenta el tono de la muestra en semitonos, por ej. 12 = una octava arriba

<syntaxhighlight lang="Haskell">
d1 $ up "0 ~ 12 24" # sound "jungbass:6"
</syntaxhighlight>

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell" inline>Pan</syntaxhighlight> nos permite crear efectos estéreo - 0 = izquierda, 0.5 = media, 1 = derecha
</div>

<syntaxhighlight lang="Haskell">
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "0 0.5 1"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>shape</syntaxhighlight> agrega distorsión (pero ten cuidado, también hace que el sonido sea mucho más alto)

<syntaxhighlight lang="Haskell">
d1 $ sound "kurt:4 kurt:4" # shape "0 0.78" # gain "0.7"
</syntaxhighlight>


== Te sientes valiente? ==

Try more effects: https://tidalcycles.org/index.php/Category:Control_Functions

<div class="mw-translate-fuzzy">
<syntaxhighlight lang="Haskell" inline>delay</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>delaytime</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>delayfeedback</syntaxhighlight> /
syntaxhighlight lang="Haskell" inline>cutoff</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>resonance</syntaxhighlight> /
<syntaxhighlight lang="Haskell" inline>room</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>size</syntaxhighlight>
</div>

== Patrones continuos ==

<syntaxhighlight lang="Haskell" inline>sine</syntaxhighlight> es un patrón continuo que sigue una curva sinusoidal de 0 a 1 y de regreso.

<syntaxhighlight lang="Haskell">
d1 $ sound "bd*32" # gain sine
</syntaxhighlight>

También puedes probar <syntaxhighlight lang="Haskell" inline>tri</syntaxhighlight>, <syntaxhighlight lang="Haskell" inline>saw</syntaxhighlight> y <syntaxhighlight lang="Haskell" inline>rand</syntaxhighlight>.