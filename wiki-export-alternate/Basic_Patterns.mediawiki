<languages />

<translate>
<!--T:1-->
The basic format for making sound in Tidal looks like this

<!--T:2-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum"
</syntaxhighlight>

<!--T:3-->
You can stop making a sound using <syntaxhighlight lang="Haskell" inline>silence</syntaxhighlight>:

<!--T:4-->
<syntaxhighlight lang="Haskell">
d1 $ silence
</syntaxhighlight>

<!--T:5-->
Pick a different sound from the same set, with `:`

<!--T:6-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum:1"
</syntaxhighlight>

<!--T:7-->
Some of the samples which come with Tidal are listed below. Try some out!

<!--T:8-->
<pre>
flick sid can metal future gabba sn mouth co gretsch mt arp h cp
cr newnotes bass hc tabla bass0 hh bass1 bass2 oc bass3 ho odx
diphone2 house off ht tink perc bd industrial pluck trump printshort
jazz voodoo birds3 procshort blip drum jvbass psr wobble drumtraks koy
rave bottle kurt latibro rm sax lighter lt arpy feel less stab ul
</pre>

<!--T:9-->
You can see what other sounds there are (or add your own) by looking 
in the ''Dirt-Samples'' folder. You can find it via the SuperCollider
menu: 'File > Open user support directory > downloaded-quarks >
Dirt-Samples'.

== Make a sequence == <!--T:10-->

<!--T:11-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd hh sn hh"
</syntaxhighlight>

<!--T:12-->
The more steps in the sequence, the faster it goes:

<!--T:13-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd bd hh bd sn bd hh bd"
</syntaxhighlight>

<!--T:14-->
This is because of the way Tidal handles time.  There is a universal
‘cycle’ (sort of like a musical 'bar') which is always running.  Tidal
will play all of the sounds between the speech marks in one cycle,
unless we tell it not to (we’ll learn how to do that later). You’ll
also notice Tidal will space the sounds out evenly within the cycle
Which means we can end up with polyrhythmic structures (more on those
later).

<!--T:15-->
We can change the length of the cycle using <source inline>setcps</source> (where cps stands for cycles per
second) - this is a bit like bpm (beats per minute).

<!--T:16-->
<syntaxhighlight lang="Haskell">
setcps 0.6
</syntaxhighlight>

<!--T:17-->
You can use d1, d2, d3...d9 to play multiple sequences at the same time

<!--T:18-->
<syntaxhighlight lang="Haskell">
d2 $ sound "sn sn:2 sn bd sn"
</syntaxhighlight>

<!--T:19-->
You can stop all the running patterns with <syntaxhighlight lang="Haskell" inline>hush</syntaxhighlight>.

<!--T:20-->
<syntaxhighlight lang="Haskell">
hush
</syntaxhighlight>

<!--T:21-->
You can pause everything by changing the cycle length to a negative
number (remember to put negative numbers in brackets).

<!--T:22-->
<syntaxhighlight lang="Haskell">
setcps (-1)
</syntaxhighlight>

<!--T:23-->
Start it up again with a positive number

<!--T:24-->
<syntaxhighlight lang="Haskell">
setcps 0.6
</syntaxhighlight>

<!--T:25-->
Or you can `solo` one channel:

<!--T:26-->
<syntaxhighlight lang="Haskell">
d1 $ sound "arpy cp arpy:2"

<!--T:84-->
d2 $ sound "sn sn:2 bd sn"

<!--T:85-->
solo 2

<!--T:86-->
-- now only the second pattern will be playing

<!--T:87-->
unsolo 2

<!--T:88-->
-- now both will be playing, again
</syntaxhighlight>

<!--T:27-->
Let add some more variety to our sequences.

<!--T:28-->
Add a silence/rest with <syntaxhighlight lang="Haskell" inline>~</syntaxhighlight>:

<!--T:29-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd ~ sn:3 bd sn:5 ~ bd:2 sn:2"
</syntaxhighlight>

<!--T:30-->
Fit a subsequence into a step with square brackets:

<!--T:31-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd [bd cp] bd bd"
</syntaxhighlight>

<!--T:32-->
This can make for flexible time signatures:

<!--T:33-->
<syntaxhighlight lang="Haskell">
d1 $ sound "[bd bd sn:5] [bd sn:3]"
</syntaxhighlight>

<!--T:34-->
You can put subsequences inside subsequences:

<!--T:35-->
<syntaxhighlight lang="Haskell">
d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"
</syntaxhighlight>

<!--T:36-->
Keep going..

<!--T:37-->
<syntaxhighlight lang="Haskell">
d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"
</syntaxhighlight>

<!--T:38-->
You can repeat a step with <syntaxhighlight lang="Haskell" inline>*</syntaxhighlight>:

<!--T:39-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd sd*2"
</syntaxhighlight>

<!--T:40-->
This works with subsequences too:

<!--T:41-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd [sd cp]*2"
</syntaxhighlight>

<!--T:42-->
Or you can do the opposite using <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight>:

<!--T:43-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd sn/2"
</syntaxhighlight>

<!--T:44-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd [sn cp]/2"
</syntaxhighlight>

<!--T:45-->
<syntaxhighlight lang="Haskell" inline>*</syntaxhighlight> works by 'speeding up' a step to play it multiple times. <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight> works
by 'slowing it down'.

<!--T:46-->
We can also schedule patterns across cycles using <syntaxhighlight lang="Haskell" inline><</syntaxhighlight> and <syntaxhighlight lang="Haskell" inline>></syntaxhighlight>:

<!--T:47-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd <sd cp arpy>"
</syntaxhighlight>

<!--T:48-->
<syntaxhighlight lang="Haskell">
d1 $ sound "<bd sn> <sd [cp cp]> <bd [cp cp]>"
</syntaxhighlight>

== Effects == <!--T:49-->

<!--T:50-->
Tidal has lots of effects we can use to change the way things sound. 

<!--T:51-->
<syntaxhighlight lang="Haskell" inline>vowel</syntaxhighlight> is a filter which adds a vowel sound -- try a, e, i, o and u

<!--T:52-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a"
</syntaxhighlight>

<!--T:53-->
We create patterns of effects in much the same way we create patterns of sounds. We call these effect and sound patterns 'control patterns'. So

<!--T:54-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o e e"
</syntaxhighlight>

<!--T:55-->
Remember that we can use "<>" to schedule across cycles

<!--T:56-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "<a o e e>"
</syntaxhighlight>

<!--T:57-->
You can add a non-vowel letter to pause the vowel effect

<!--T:58-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o p p"
</syntaxhighlight>

<!--T:59-->
Tidal does its best to map patterns across to one another

<!--T:60-->
<syntaxhighlight lang="Haskell">
d1 $ sound "drum drum drum drum" # vowel "a o e"
</syntaxhighlight>

<!--T:61-->
The structure comes from the left - try swapping the parameters

<!--T:62-->
<syntaxhighlight lang="Haskell">
d1 $ vowel "a o ~ i" # sound "drum" 
</syntaxhighlight>

<!--T:63-->
'''Health warning''' - This is one of the changes coming up in the new Tidal - you will be able to control which side the structure comes from. . Or combine structure from ''both'' sides.

<!--T:64-->
<syntaxhighlight lang="Haskell" inline>gain</syntaxhighlight> changes the volume of different sounds

<!--T:65-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd hh sn:1 hh sn:1 hh" # gain "1 0.7 0.5"
</syntaxhighlight>


<!--T:66-->
<syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> and <syntaxhighlight lang="Haskell" inline>note</syntaxhighlight> are used for pitching samples.

<!--T:67-->
<syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> affects the speed of playback, e.g. 2 = up an octave

<!--T:68-->
<syntaxhighlight lang="Haskell">
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "1 1.5 2 0.5"
</syntaxhighlight>

<!--T:69-->
Or we can take the pattern from the <syntaxhighlight lang="Haskell" inline>speed</syntaxhighlight> parameter

<!--T:70-->
<syntaxhighlight lang="Haskell">
d1 $ speed "1 2 4" # sound "jungbass:6"
</syntaxhighlight>

<!--T:71-->
<syntaxhighlight lang="Haskell" inline>note</syntaxhighlight> pitches the sample up in semitones, e.g. 12 = up an octave

<!--T:72-->
<syntaxhighlight lang="Haskell">
d1 $ up "0 ~ 12 24" # sound "jungbass:6"
</syntaxhighlight>

<!--T:73-->
<syntaxhighlight lang="Haskell" inline>pan</syntaxhighlight> allows us to create stereo effects - 0 = left, 0.5 = middle, 1 = right

<!--T:74-->
<syntaxhighlight lang="Haskell">
d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "0 0.5 1"
</syntaxhighlight>

<!--T:75-->
<syntaxhighlight lang="Haskell" inline>shape</syntaxhighlight> adds distortion (but be careful - it also makes the sound much louder)

<!--T:76-->
<syntaxhighlight lang="Haskell">
d1 $ sound "kurt:4 kurt:4" # shape "0 0.78" # gain "0.7"
</syntaxhighlight>


== feeling brave ? == <!--T:77-->

<!--T:78-->
Try more effects: https://tidalcycles.org/index.php/Category:Control_Functions

<!--T:79-->
<syntaxhighlight lang="Haskell" inline>delay</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>delaytime</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>delayfeedback</syntaxhighlight> /
<syntaxhighlight lang="Haskell" inline>cutoff</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>resonance</syntaxhighlight> /
<syntaxhighlight lang="Haskell" inline>room</syntaxhighlight> / <syntaxhighlight lang="Haskell" inline>size</syntaxhighlight>

== Continuous patterns == <!--T:80-->

<!--T:81-->
<syntaxhighlight lang="Haskell" inline>sine</syntaxhighlight> is a continuous pattern following a sine curve from 0 to 1 and back

<!--T:82-->
<syntaxhighlight lang="Haskell">
d1 $ sound "bd*32" # gain sine
</syntaxhighlight>

<!--T:83-->
You can also try <syntaxhighlight lang="Haskell" inline>tri</syntaxhighlight>, <syntaxhighlight lang="Haskell" inline>saw</syntaxhighlight> and <syntaxhighlight lang="Haskell" inline>rand</syntaxhighlight>.

</translate>