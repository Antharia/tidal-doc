<languages/>
<translate>
<!--T:1-->
Adding and using your own custom samples in TidalCycles is relatively easy. You don't actually add samples into TidalCycles, but instead add them into SuperCollider and the SuperDirt quark. 
To do this, you will need to customize your SuperDirt startup code.

= Custom SuperDirt Startup = <!--T:2-->

<!--T:3-->
When you open SuperCollider, instead of the normal <code>SuperDirt.start</code> code, you will need to write a longer script that tells SuperDirt where to find your samples. The startup script will look like this:

<!--T:4-->
<source lang="c">
(
s.waitForBoot {
	~dirt = SuperDirt(2, s); // two output channels
	~dirt.loadSoundFiles("/Users/myUserName/Dirt/samples/*"); // specify sample folder to load
	s.sync; // wait for supercollider to finish booting up
	~dirt.start(57120, 0 ! 12); // start superdirt, listening on port 57120, create twelve orbits each sending audio to channel 0
};
);
</source>

<!--T:5-->
To run the above code, place the cursor anywhere inside that code block, then press <code>Ctrl+Enter</code> (or <code>Command+Enter</code> on MacOS) to evaluate the whole block.

<!--T:6-->
The above code will boot the SuperCollider server, then start up SuperDirt with some samples located at <code>/Users/myUserName/Dirt/samples</code>. 

<!--T:7-->
You can reference a longer example startup script located in the SuperDirt code repository: https://github.com/musikinformatik/SuperDirt/blob/develop/superdirt_startup.scd

== Windows Paths == <!--T:8-->

<!--T:9-->
If you are running Windows, you will need to escape the backslash characters in Windows paths:

<!--T:10-->
<source>
~dirt.loadSoundFiles("c:\\Users\\myUserName\\Dirt\\samples\\*")
</source>

= Sample Folder Structure = <!--T:11-->

<!--T:12-->
In the above example, we have imported a folder at the path <code>/Users/myUserName/Dirt/samples</code>. In order for SuperDirt to recognize the sound names that Tidal sends, the
<code>/Users/myUserName/Dirt/samples</code> folder will need to have sub-folders for each sound name, and each sound name folder will need to have sample files:

 <!--T:13-->
Users/
 |-- myUserName/
     |-- Dirt/
         |-- samples/
             |-- myBass/
             |   |-- bass1.wav
             |   |-- bass2.wav
             |   |-- bass3.wav
             |-- hits/
             |   |-- hit1.wav
             |   |-- hit2.wav
             |   |-- hit3.wav
             |-- field/
             |   |-- bridge.wav
             |   |-- mountains1.wav
             |   |-- mountains2.wav
             |   |-- plains.wav
             |   |-- river.wav

= Using the Custom Samples in Tidal Code = <!--T:14-->

<!--T:15-->
Given the folder structure above, you can now use the <code>myBass</code>, <code>hits</code>, and <code>field</code> sounds in your Tidal patterns:

<!--T:16-->
<source>
d1 $ s "mybass hits*4" # n (slow 2 $ run 3)
d2 $ n "<0 2 1>" # s "field" # cut 1
</source>

= Specifying Multiple Folders = <!--T:17-->

<!--T:18-->
If you have samples located in many folders, you can import them all:

<!--T:19-->
<source lang="c">
(
s.waitForBoot {
	~dirt = SuperDirt(2, s); // two output channels

        <!--T:20-->
// load samples from multiple folders:
	~dirt.loadSoundFiles("/Users/myUserName/Dirt/samples/*"); 
	~dirt.loadSoundFiles("/Users/myUserName/sounds/*"); 
	~dirt.loadSoundFiles("/Users/myUserName/recordings/chaska-sessions/*");
	~dirt.loadSoundFiles("/Users/myUserName/recordings/super-duper-experiments/*"); 

	<!--T:21-->
s.sync; // wait for supercollider to finish booting up
	~dirt.start(57120, [0, 0]); // start superdirt, listening on port 57120, create two orbits each sending audio to channel 0
};
);
</source>

<!--T:22-->
[[Category:Reference]]
</translate>