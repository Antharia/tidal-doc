<translate>

= Combining numerical patterns = <!--T:31-->

<!--T:2-->
A core feature of Tidal is the ease in which two patterns can be combined.

<!--T:27-->
For example, these are two patterns being combined by adding together their elements:

<!--T:3-->
<syntaxhighlight lang = "Haskell">
"2 3" + "4 5 6"
</syntaxhighlight>

<!--T:28-->
The result of the above is equivalent to the pattern <syntaxhighlight lang = "Haskell" inline>"6 [7 8] 9"</syntaxhighlight>. But why?

<!--T:4-->
Let's look closer. The two patterns line up over time like this:

<!--T:5-->
<pre>
  |  2  |  3  |
+ | 4 | 5 | 6 |
</pre>

<!--T:6-->
Unlike in previous versions of Tidal, when you combine two patterns in this way, by default the structure now comes from ''both patterns''. This means you end up with ''four'' events, because the <syntaxhighlight lang="Haskell" inline>5</syntaxhighlight> in the middle lines up both with the <syntaxhighlight lang="Haskell" inline>2</syntaxhighlight> and the <syntaxhighlight lang="Haskell" inline>3</syntaxhighlight>, and gets split in half between them. We can add the resulting pattern to our table:

<!--T:7-->
<pre>
  |  2  |  3  |
+ | 4 | 5 | 6 |
= | 6 |7|8| 9 |
</pre>

<!--T:8-->
You can see that the <syntaxhighlight lang="Haskell" inline>4</syntaxhighlight> fits inside <syntaxhighlight lang="Haskell" inline>2</syntaxhighlight>, so where they intersect, you get a new event equal to their sum <syntaxhighlight lang="Haskell" inline>6</syntaxhighlight>.

<!--T:9-->
Also see that the event with value <syntaxhighlight lang="Haskell" inline>5</syntaxhighlight> is cut in half, to create two,
shorter events. Half matches with the <syntaxhighlight lang="Haskell" inline>2</syntaxhighlight> event and the other half
matches with the <syntaxhighlight lang="Haskell" inline>3</syntaxhighlight> event.

<!--T:10-->
The fourth and final event comes from the intersection of <syntaxhighlight lang="Haskell" inline>3</syntaxhighlight> and <syntaxhighlight lang="Haskell" inline>6</syntaxhighlight>,
giving a value of <syntaxhighlight lang="Haskell" inline>9</syntaxhighlight>.

== Structure from the left == <!--T:11-->

<!--T:12-->
In previous versions of Tidal, the structure always came from the left. You can still do this, but in this case using <syntaxhighlight lang="Haskell" inline>|+</syntaxhighlight>. 

<!--T:13-->
For example:

<!--T:14-->
<syntaxhighlight lang="Haskell">
"2 3" |+ "4 5 6"
</syntaxhighlight>

<!--T:15-->
In the above example, you end up with structure from the first (leftmost) pattern, like this:

<!--T:16-->
<pre>
   |  2  |  3  |
|+ | 4 | 5 | 6 |
 = |  6  |  8  |
</pre>

<!--T:17-->
You can see the structure comes from the <syntaxhighlight lang="Haskell" inline>2</syntaxhighlight> and <syntaxhighlight lang="Haskell" inline>3</syntaxhighlight>. <syntaxhighlight lang="Haskell" inline>2</syntaxhighlight> lines up
with <syntaxhighlight lang="Haskell" inline>4</syntaxhighlight>, and the start of <syntaxhighlight lang="Haskell" inline>3</syntaxhighlight> is in <syntaxhighlight lang="Haskell" inline>5</syntaxhighlight>, so you end up with <syntaxhighlight lang="Haskell" inline>2+4=6</syntaxhighlight>
and <syntaxhighlight lang="Haskell" inline>3+5=8</syntaxhighlight>. The result is the equivalent of <syntaxhighlight lang="Haskell" inline>"6 8"</syntaxhighlight>

== Structure from the right == <!--T:18-->

<!--T:19-->
Likewise, you can take the structure from the right, with <syntaxhighlight lang="Haskell" inline>+|</syntaxhighlight>. So <syntaxhighlight lang="Haskell" inline>"2
3" +| "4 5 6"</syntaxhighlight> looks like:

<!--T:20-->
<pre>
   |  2  |  3  |
+| | 4 | 5 | 6 |
 = | 6 | 7 | 9 |
</pre>

<!--T:29-->
The result is the equivalent of <syntaxhighlight lang="Haskell" inline>"6 7 9"</syntaxhighlight>.

== All the operators == <!--T:21-->

<!--T:30-->
So far, we've just looked at 

<!--T:22-->
Note that <syntaxhighlight lang="Haskell" inline>+</syntaxhighlight> is actually an alias for <syntaxhighlight lang="Haskell" inline>|+|</syntaxhighlight>. So <syntaxhighlight lang="Haskell" inline>|+</syntaxhighlight> is to take the
structure from the left, <syntaxhighlight lang="Haskell" inline>+|</syntaxhighlight> from the right, and <syntaxhighlight lang="Haskell" inline>|+|</syntaxhighlight> or <syntaxhighlight lang="Haskell" inline>+</syntaxhighlight> for
both. Here are the basic operators you can use to combine numerical patterns:

<!--T:23-->
{| class="wikitable"
! Function
! Both
! Left
! Right 
|-
|Add 
| <syntaxhighlight lang="Haskell" inline>|+|</syntaxhighlight> (or <syntaxhighlight lang="Haskell" inline>+</syntaxhighlight>)
| <syntaxhighlight lang="Haskell" inline>|+</syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline>+|</syntaxhighlight>
|-
|Subtract
| <syntaxhighlight lang="Haskell" inline>|-|</syntaxhighlight> (or <syntaxhighlight lang="Haskell" inline>-</syntaxhighlight>)
| <syntaxhighlight lang="Haskell" inline>|-</syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline>-|</syntaxhighlight>
|-
|Multiply
| <syntaxhighlight lang="Haskell" inline>|*|</syntaxhighlight> (or <syntaxhighlight lang="Haskell" inline>*</syntaxhighlight>)
| <syntaxhighlight lang="Haskell" inline>|*</syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline>*|</syntaxhighlight>
|-
|Divide
| <syntaxhighlight lang="Haskell" inline>|/|</syntaxhighlight> (or <syntaxhighlight lang="Haskell" inline>/</syntaxhighlight>)
| <syntaxhighlight lang="Haskell" inline>|/</syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline>/|</syntaxhighlight>
|-
|Modulo
| <syntaxhighlight lang="Haskell" inline>|%|</syntaxhighlight>
| <syntaxhighlight lang="Haskell" inline>|%</syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline>%|</syntaxhighlight>
|-
|Left values
| <syntaxhighlight lang="Haskell" inline>|<|</syntaxhighlight>
| <syntaxhighlight lang="Haskell" inline>|<</syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline><|</syntaxhighlight>
|-
|Right values
| <syntaxhighlight lang="Haskell" inline>|>|</syntaxhighlight>
| <syntaxhighlight lang="Haskell" inline>|></syntaxhighlight> 
| <syntaxhighlight lang="Haskell" inline>>|</syntaxhighlight>
|}

<!--T:24-->
The last two are interesting, they let you only take values from one
side. So for example you could take structure from the left, but
values from the right with <syntaxhighlight lang="Haskell" inline>|></syntaxhighlight>, for example:

<!--T:25-->
<pre>
   |  2  |  3  |
|> | 4 | 5 | 6 |
 = |  4  |  5  |
</pre>

<!--T:26-->
This is very similar to how <syntaxhighlight lang="Haskell" inline>|+|</syntaxhighlight> used to work in the versions of tidal prior to 1.0.0 - it took structure from the left, but values from the right. In fact, <syntaxhighlight lang="Haskell" inline>#</syntaxhighlight> is an alias for <syntaxhighlight lang="Haskell" inline>|></syntaxhighlight>, mirroring the behaviour in previous versions of tidal.
</translate>

= Combining control patterns =

A control pattern (formerly known as a 'param pattern'), is a pattern that's been given a control name. For example the number pattern <syntaxhighlight lang="Haskell" inline>"1 2 3"</syntaxhighlight> can be turned into a control pattern like this <syntaxhighlight>speed "1 2 3"</syntaxhighlight>.

Control patterns can be combined together in the same way as numerical patterns. For example:

<syntaxhighlight lang="Haskell">
d1 $ sound "drum" |+| n "1 2 3"
</syntaxhighlight>

Nothing actually gets added together in the above, they're just combined into the equivalent of <syntaxhighlight lang="Haskell" inline>d1 $ sound "drum:1 drum:2 drum:3"</syntaxhighlight>. However if you specify the same numerical control more than once, then their values _will_ be combined. For example:

<syntaxhighlight lang="Haskell">
d1 $ sound "drum" |+| n "2 3" |+| n "4 5 6"
</syntaxhighlight>

The above will be equivalent to:

<syntaxhighlight lang="Haskell">
d1 $ sound "drum" |+| n "6 [7 8] 9"
</syntaxhighlight>

[[Category:Tidal-1+]]
[[Category:Reference]]