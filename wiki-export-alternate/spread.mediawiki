{{DISPLAYTITLE:spread}} 

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>spread :: (a -> t -> Pattern b) -> [a] -> t -> Pattern b</syntaxhighlight>

The '''spread''' function allows you to take a pattern transformation
which takes a parameter, such as `slow`, and provide several
parameters which are switched between. In other words it 'spreads' a
function across several values.

Taking a simple high hat loop as an example:

<syntaxhighlight lang="haskell" inline>d1 $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>

We can speed it up by different amounts, such as by 2x:

<syntaxhighlight lang="haskell" inline>d1 $ fast 2 $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>

Or by 3x:

<syntaxhighlight lang="haskell" inline>d1 $ fast 3 $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>

But if we use '''spread''', we can make a pattern which alternates between
the two speeds:

<syntaxhighlight lang="haskell" inline>d1 $ spread fast[2,3] $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>

Note that many functions now allow pattern input.  This is equivalent to the above

<syntaxhighlight lang="haskell" inline>d1 $ fast "<2 3>" $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>


Note that if you pass <syntaxhighlight lang="haskell" inline>($)</syntaxhighlight> as the function to spread values over, you
can put different functions as the list of values. For example:

<syntaxhighlight lang="haskell" inline>d1 $ spread ($) [density 2, rev, slow 2, striate 3, (# speed "0.8")]
    $ sound "[bd*2 [~ bd]] [sn future]*2 cp jvbass*4"</syntaxhighlight>

Above, the pattern will have these transforms applied to it, one at a time, per cycle:
* cycle 1: <syntaxhighlight lang="haskell" inline>density 2</syntaxhighlight> - pattern will increase in speed
* cycle 2: <syntaxhighlight lang="haskell" inline>rev</syntaxhighlight> - pattern will be reversed
* cycle 3: <syntaxhighlight lang="haskell" inline>slow 2</syntaxhighlight> - pattern will decrease in speed
* cycle 4: <syntaxhighlight lang="haskell" inline>striate 3</syntaxhighlight> - pattern will be granualized
* cycle 5: <syntaxhighlight lang="haskell" inline>(# speed "0.8")</syntaxhighlight> - pattern samples will be played back more slowly
After <syntaxhighlight lang="haskell" inline>(# speed "0.8")</syntaxhighlight>, the transforms will repeat and start at <syntaxhighlight lang="haskell" inline>density 2</syntaxhighlight> again.

= spreadf =
A convenient shorthand for <syntaxhighlight lang="haskell" inline>spread ($)</syntaxhighlight>

= fastspread =

'''fastspread''' works the same as '''spread''', but the result is squashed into a single cycle. If you gave four values to '''spread''', then the result would seem to speed up by a factor of four. Compare these two:

<syntaxhighlight lang="haskell" inline>d1 $ spread ($) [gap 4, striate 4] $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>d1 $ fastspread ($) [gap 4, striate 4] $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>


= spreadChoose =

'''spreadChoose''' (alias '''spreadr''') works the same as '''spread''', but the values are selected at random, one cycle at a time.  For example:

<syntaxhighlight lang="haskell" inline>d1 $ spreadChoose ($) [gap 4, striate 4] $ sound "ho ho:2 ho:3 hc"</syntaxhighlight>


[[Category:Functions]] [[Category:Higher-order functions]]