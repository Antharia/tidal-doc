'''Oscillators''' are continuously varying patterns.

Unless otherwise stated, oscillators give minimum values of 0 and maximum values of 1, and repeat once per cycle.

Oscillators are ''continuous'' patterns, which means they don't have any structure, and must be used with a pattern that does. For example <source inline>d1 $ sound "bd*8" >| pan sine</source> won't work well, because the <source inline>>|</source> operator instructs tidal to take structure from the right, and <source inline>sine</source> doesn't have any structure, so tidal will simply trigger events at a fixed rate (depending on your configuration, this might be very fast). <source inline>d1 $ sound "bd*8" |> pan sine</source> is better, because <source inline>|></source> takes structure from the left, so eight kick drums will play, with pan values sampled from the sine wave for each of the eight events.

''Where a pattern has the type <source inline>Fractional a => Pattern a</source>, that means that they can be used both as floating point numbers or (rational) time values.''

= sine =
[[Type signature|Type]]: <source inline>sine :: Fractional a => Pattern a</source>

A sine wave.

<source>d1 $ sound "bd*8" # pan sine</source>

= cosine =
[[Type signature|Type]]: <source inline>cosine :: Fractional a => Pattern a</source>

A cosine wave, i.e. a <source inline>sine</source> shifted in time by a quarter of a cycle.

<source>d1 $ sound "bd*8" # pan cosine # speed (sine + 0.5)</source>

= square =
[[Type signature|Type]]: <source inline>square :: Fractional a => Pattern a</source>

A squarewave, starting at 0, then going up to 1 halfway through a cycle.

<source>d1 $ sound "bd*8" # pan (cat [square, sine])</source>

= tri =
[[Type signature|Type]]: <source inline>tri :: Fractional a => Pattern a</source>

A triangle wave, starting at 0, then linearly rising to 1 halfway through a cycle, then down again.

<source>d1 $ sound "bd*16" # speed (slow 2 $ range 0.5 2 tri)</source>

= saw =
[[Type signature|Type]]: <source inline>saw :: Fractional a => Pattern a</source>

A sawtooth wave starting at 0, then linearly rising to 1 over one cycle, then jumping back to 0.

<source>d1 $ sound "bd*8" # pan (slow 2 saw)</source>

= isaw =
[Type signature|Type]]: <source inline>saw :: Fractional a => Pattern a</source>

An inverted sawtooth, starting at 1, then linearly falling to 0 over one cycle, then jumping back to 1.

<source>d1 $ sound "bd*8" # pan (slow 2 isaw)</source>

= Random oscillators =

== [[rand]] ==
[[Type signature|Type]]: <source inline>rand :: Fractional a => Pattern a</source>

An infinitely detailed stream of (pseudo-)random numbers. See[ the [[rand]] page for more details.

<source>d1 $ sound "bd*8" # pan rand</source>

== [[irand]] ==
[[Type signature|Type]]: <source inline>irand :: Num a => Int -> Pattern a</source>

A function from an integer (giving the maximum) to a stream of (pseudo-)random integer numbers. See[ the [[rand#irand|rand]] page for more details.

<source>d1 $ sound "drum*8" # n (irand 8)</source>

== [[choose]] and friends ==

These have their [[choose|own page]], click the names for more information:

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>choose :: [a] -> Pattern a</syntaxhighlight>

[[choose]] continuously oscillates between random choices.

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>chooseBy :: Pattern Double -> [a] -> Pattern a</syntaxhighlight>

[[chooseBy]] uses an oscillator (or other pattern) to select elements.

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>wchoose :: [(a, Double)] -> Pattern a</syntaxhighlight>

[[wchoose]] continuously oscillates between random choices, with each choice given a weight/likelihood.

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>wchooseBy :: Pattern Double -> [(a,Double)] -> Pattern a </syntaxhighlight>

[[wchooseBy]] is like [[wchoose]] but another oscillator/pattern is used to select weighted elements.


[[Category:Reference]]
[[Category:Elemental patterns]]
[[Category:Functions]]