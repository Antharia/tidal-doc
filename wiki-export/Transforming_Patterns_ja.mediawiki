<languages />
パターンを変形すると、もっとより複雑なパターンを作ることができます。 

<syntaxhighlight lang="haskell" inline>slow</syntaxhighlight> 関数などを使うと、1サイクルという枠組みを超えて、パターンを変形できます

<syntaxhighlight lang="haskell" inline>slow</syntaxhighlight> は、パターンを複数のサイクル間にまたがるように、引きのばせます。

<syntaxhighlight lang="haskell">
d1 $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ slow 2 $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>fast</syntaxhighlight> は、パターンを1サイクル未満の長さに圧縮します。

<syntaxhighlight lang="haskell" inline>density</syntaxhighlight> という記法を見ることがあるでしょう。これも行うことは同じです!

<syntaxhighlight lang="haskell" inline>fast 0.5</syntaxhighlight> は <syntaxhighlight lang="haskell" inline>slow 2</syntaxhighlight> と同じ意味です!

<syntaxhighlight lang="haskell">
d1 $ fast 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ fast 0.5 $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>hurry</syntaxhighlight>  は fast に似ていますが、スピードの変形を行わない点で異なります。

<syntaxhighlight lang="haskell">
d1 $ sound "arpy arpy arpy:1 arpy:2"

d1 $ hurry 2 $ sound "arpy arpy arpy:1 arpy:2"

d1 $ hurry 0.5 $ sound "arpy arpy arpy:1 arpy:2"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>rev</syntaxhighlight> で、パターンを逆再生します。

<syntaxhighlight lang="haskell">
d1 $ rev $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>palindrome</syntaxhighlight> は、順に再生と逆再生をつなげて行います。

<syntaxhighlight lang="haskell">
d1 $ palindrome $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>iter</syntaxhighlight> は、サイクルごとに異なる点からパターンを開始します。開始された点に戻るまで、指定回数ずらしながら再生を続けます。

<syntaxhighlight lang="haskell">
d1 $ iter 4 $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>


<syntaxhighlight lang="haskell" inline>every</syntaxhighlight> は、変形やエフェクトを、サイクルを指定してスケジューリングできます。

例 4サイクルごとに、2倍の速さで再生:

<syntaxhighlight lang="haskell">
d1 $ every 4 (fast 2) $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

...また、同じ方法でエフェクトもスケジューリングできます。

<syntaxhighlight lang="haskell">
d1 $ every 4 (# vowel "a o") $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>jux</syntaxhighlight> ('juxtapose'の略) は、変形やエフェクトを取り込み、変形やエフェクト後のパターンを一方のスピーカー、元パターンを一方のスピーカーで再生します。

<syntaxhighlight lang="haskell">
d1 $ sound "arpy arpy:1 arpy:2 arpy:3"
d1 $ jux (rev) $ sound "arpy arpy:1 arpy:2 arpy:3"
d1 $ jux (hurry 2) $ sound "arpy arpy arpy:1 arpy:2"
</syntaxhighlight>

<syntaxhighlight lang="haskell" inline>chunk</syntaxhighlight> は、毎回パターンの異なる部分に変形やエフェクトを適用します。例えばパラメータに <syntaxhighlight lang="haskell" inline>4</syntaxhighlight> を指定すると、サイクルの1/4ごとに適用されます。

<syntaxhighlight lang="haskell">
d1 $ chunk 4 (hurry 2) $ sound  "arpy arpy:1 arpy:2 arpy:3"
d1 $ chunk 4 (# speed 2) $ sound  "alphabet:0 alphabet:1 alphabet:2 alphabet:3"
</syntaxhighlight>

== 他にもっと試したいなら ==

1つ以上の変形を連ねることができます! <syntaxhighlight lang="haskell" inline>.</syntaxhighlight> で、変形やエフェクトを連鎖できます。

<syntaxhighlight lang="haskell">
d1 $ jux (rev . (slow 1.5)) $ sound "arpy arpy:1 arpy:2 arpy:3"
</syntaxhighlight>

(ほぼ)すべてのものはパターンなので、これらの変形はエフェクトにも適用できることをお忘れなく!

<syntaxhighlight lang="haskell">
d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # note "1 [3 5] 7"
d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # iter 3 (note "1 [3 5] 7")
</syntaxhighlight>

sin波や、ノコギリ波を減速したり、拡大すると何が起こるでしょうか。