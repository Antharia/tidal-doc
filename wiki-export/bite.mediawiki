[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>bite :: Int -> Pattern Int -> Pattern a -> Pattern a</syntaxhighlight>

The '''bite''' function allows you to slice each cycle into a given number of equal sized bits, and then pattern those bits by number. It's similar to [[slice]], but is for slicing up patterns, rather than samples.

The following slices the pattern into four bits, and then plays those bits in turn.

<source>
d1 $ bite 4 "0 1 2 3" $ n "0 .. 7" # sound "arpy"
</source>

Of course that doesn't actually change anything, but then you can reorder those bits:

<source>
d1 $ bite 4 "2 0 1 3" $ n "0 .. 7" # sound "arpy"
</source>

The slices bits of pattern will be squeezed or contracted to fit:

<source>
d1 $ bite 4 "2 [0 3] 1*4 1" $ n "0 .. 7" # sound "arpy"
</source>

== chew ==

[[Type signature|Type]]: <syntaxhighlight lang="haskell" inline>chew :: Int -> Pattern Int -> Pattern a -> Pattern a</syntaxhighlight>

'''chew''' works the same as <source inline>bite</source>, but speeds up/slows down playback of sounds as well as squeezing / contracting the slices of pattern.

Compare these:

<source>
d1 $ bite 4 "0 1*2 2*2 [~ 3]" $ n "0 .. 7" # sound "drum"

d1 $ chew 4 "0 1*2 2*2 [~ 3]" $ n "0 .. 7" # sound "drum"
</source>

[[Category:Functions]]