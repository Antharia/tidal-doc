[[Type signatures|Type]]: <syntaxhighlight lang="haskell" inline> step :: String -> String -> Pattern String </syntaxhighlight>

'''step''' acts as a kind of simple step-sequencer using strings. For example, <source inline>step "sn" "x x 12 "</source> is equivalent to the pattern of strings given by <source inline>"sn ~ sn ~ sn:1 sn:2 ~"</source>. <source inline>step</source> substitutes the given string for each x, for each number it substitutes the string followed by a colon and the number, and for everything else it puts in a rest. 

In other words, step generates a pattern of strings in exactly the syntax you'd want for selecting samples and that can be fed directly into the <source inline>s</source> function. 

<source>
d1 $ s (step "sn" "x x 12 ")
</source>

= steps =
[[Type signatures|Type]]: <syntaxhighlight lang="haskell" inline> steps :: [(String,String)] -> Pattern String </syntaxhighlight>

'''steps''' is like step but it takes a ''list'' of pairs like <source inline>step</source> would and it plays them all simultaneously.

<source>
d1 $ s (steps [("cp","x  x x  x x  x"),("bd", "xxxx")])
</source>

= step' =
[[Type signatures|Type]]: <syntaxhighlight lang="haskell" inline> step' :: [String] -> String -> Pattern String </syntaxhighlight>

'''step'''' is like <source inline>step</source> but more general, using the numbers in the step-sequencing string as indexes into the list of strings you give it.  

<source>
d1 $ s (step' ["superpiano","supermandolin"] "0 1 000 1") # sustain 4 # n 0 
</source>

is equivalent to 
<source>
d1 $ s "superpiano ~ supermandolin ~ superpiano!3 ~ supermandolin" # sustain 4 # n 0
</source>