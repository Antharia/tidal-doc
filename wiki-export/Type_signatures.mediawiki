In Haskell (which Tidal lives in), a type signature tells you what kind of thing a value or function is. They're particularly useful for finding out what a function expects from you, and what it gives back.

You can find out the type of a function is with <syntaxhighlight lang="haskell" inline>:t</syntaxhighlight> 
, for example to find out the type signature for [[rev]], you could type <syntaxhighlight lang="haskell" inline>:t rev</syntaxhighlight>
into your editor, and evaluate it. You'll see this in the output window:

<syntaxhighlight lang="haskell">
rev :: Pattern a -> Pattern a
</syntaxhighlight>

That's quite simple, it tells you that it takes a pattern as input, and gives you back a pattern as output. Let's have a look at the [[fast]] function, via
<syntaxhighlight lang="haskell" inline>:t fast</syntaxhighlight>:

<syntaxhighlight lang="haskell">
fast :: Pattern Time -> Pattern a -> Pattern a
</syntaxhighlight>

That's a bit more complicated, there's three patterns there. The last one is always the output, and the ones preceding it are the inputs. So <syntaxhighlight lang="haskell" inline>fast</syntaxhighlight> takes a pattern of time, another pattern, and gives you a pattern in return. That makes some sense too, the first parameter says how fast it should go in terms of time, and can be patterned. The second parameter is the pattern that is going to be made faster, but it doesn't say what kind of pattern it is, it just says <syntaxhighlight lang="haskell" inline>Pattern a</syntaxhighlight>, and the same with the output. We saw the same <syntaxhighlight lang="haskell" inline>Pattern a</syntaxhighlight> type earlier with <syntaxhighlight lang="haskell" inline>rev</syntaxhighlight>. What does it mean?

Well the <syntaxhighlight lang="haskell" inline>a</syntaxhighlight> in <syntaxhighlight lang="haskell" inline>Pattern a</syntaxhighlight> is unconstrained - it can be whatever you like. So the <syntaxhighlight lang="haskell" inline>rev</syntaxhighlight> function can work on any kind of pattern. This is because <syntaxhighlight lang="haskell" inline>rev</syntaxhighlight> doesn't deal with any particular values, it just manipulates time.

So <syntaxhighlight lang="haskell" inline>a</syntaxhighlight> is a kind of wildcard here, used in both the input and output of <source inline>rev</source>. This means that if you can give it a pattern of anything, but if you give it a pattern of integers, you are ''guaranteed'' to get a pattern of integers back. So you can swap that <syntaxhighlight lang="haskell" inline>a</syntaxhighlight> for another type but only if you swap all instances of it for the same type.

A more complicated example is [[every]]:

<syntaxhighlight lang="haskell">
every :: Pattern Int -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a
</syntaxhighlight>

Now, <syntaxhighlight lang="haskell" inline>every</syntaxhighlight> takes three parameters, a whole number of cycles, a function to apply to a pattern, and the pattern itself. We can see that the first parameter is a pattern of integers (aka whole numbers), fine. The second parameter is stranger - <syntaxhighlight lang="haskell" inline>(Pattern a -> Pattern a)</syntaxhighlight>. This is how functions that are parameters are shown - wrapped in parenthesis. We can see from this that the second parameter is a function, that takes a pattern of any type as input, and gives a pattern of the same type as output. If we look back at the type signature of <syntaxhighlight lang="haskell" inline>rev</syntaxhighlight>, it's pretty clear that we could give that as this second parameter, as the types match.. Indeed it's quite common to do <syntaxhighlight lang="haskell" inline>every 3 rev (s "bd sn")</syntaxhighlight>, for example.

Hopefully that gives you some insight into how to read type signatures. They're really useful for understanding how to use functions, even without reading documentation.

Feel free to add any questions to the discussion page.

[[Category:Reference]]