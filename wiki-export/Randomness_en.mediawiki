<languages />
Randomness can help us quickly introduce character and variation into our patterns


<syntaxhighlight lang="Haskell" inline>sometimes</syntaxhighlight> works a bit like <syntaxhighlight lang="Haskell" inline>every</syntaxhighlight>, but instead of happening after a set period, changes have a random chance of appearing

<syntaxhighlight lang="Haskell">
d1 $ sometimes (# speed "2") $ sound "drum*8"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>often</syntaxhighlight> works like <syntaxhighlight lang="Haskell" inline>sometimes</syntaxhighlight> but happens more often!

<syntaxhighlight lang="Haskell">
d1 $ often (# speed "2") $ sound "drum*8"
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>irand</syntaxhighlight> generates a random integer up to the number specified. e.g. to play a random sample:

<syntaxhighlight lang="Haskell">
d1 $ sound "arpy(3,8)" # n (irand 16)
</syntaxhighlight>

<syntaxhighlight lang="Haskell" inline>rand</syntaxhighlight> generates a random decimal between 0 and 1

<syntaxhighlight lang="Haskell">
d1 $ sound "tink*16" # gain rand
</syntaxhighlight>

You can use <syntaxhighlight lang="Haskell" inline>degradeBy</syntaxhighlight> to remove random elements.  The number indicates how likely a sample is to play

<syntaxhighlight lang="Haskell">
d1 $ degradeBy 0.2 $ sound "tink*16"
</syntaxhighlight>

(<syntaxhighlight lang="Haskell" inline>degrade</syntaxhighlight> on its own is the same as <syntaxhighlight lang="Haskell" inline>degradeBy 0.5</syntaxhighlight>)

Or, you can use ? to remove sounds with a 50% likelihood

<syntaxhighlight lang="Haskell">
d1 $ sound "bd sn:2? bd sn?"
</syntaxhighlight>