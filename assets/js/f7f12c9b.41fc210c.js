(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{207:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return l})),t.d(a,"metadata",(function(){return s})),t.d(a,"toc",(function(){return i})),t.d(a,"default",(function(){return p}));var n=t(3),r=t(7),c=(t(0),t(215)),l={title:"Concatenation",id:"concatenation"},s={unversionedId:"reference/concatenation",id:"reference/concatenation",isDocsHomePage:!1,title:"Concatenation",description:"This page will present you all the functions that can be used to concatenate (e.g. add) things together in various ways. Each function will be presented following the same model:",source:"@site/docs/reference/concatenation.md",slug:"/reference/concatenation",permalink:"/docs/reference/concatenation",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/concatenation.md",version:"current",lastUpdatedBy:"Raphael Forment",lastUpdatedAt:1622038588,sidebar:"reference",previous:{title:"Even more",permalink:"/docs/reference/even-more"},next:{title:"Accumulation",permalink:"/docs/reference/accumulation"}},i=[{value:"Many cats",id:"many-cats",children:[{value:"cat",id:"cat",children:[]},{value:"fastcat",id:"fastcat",children:[]},{value:"timeCat",id:"timecat",children:[]},{value:"randcat",id:"randcat",children:[]}]},{value:"Append family",id:"append-family",children:[{value:"append",id:"append",children:[]},{value:"fastAppend",id:"fastappend",children:[]}]},{value:"wedge",id:"wedge",children:[]},{value:"brak",id:"brak",children:[]},{value:"flatpat",id:"flatpat",children:[]},{value:"run",id:"run",children:[]},{value:"scan",id:"scan",children:[]}],o={toc:i};function p(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},o,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"This page will present you all the functions that can be used to concatenate (e.g. add) things together in various ways. Each function will be presented following the same model:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Type signature"),": how the function is declared on the ",Object(c.b)("strong",{parentName:"li"},"Haskell")," side."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Description"),": verbal description of the function."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Examples"),": a small list of examples that you can copy/paste in your editor.")),Object(c.b)("h2",{id:"many-cats"},"Many cats"),Object(c.b)("h3",{id:"cat"},"cat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: cat :: [Pattern a] -> Pattern a \n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"cat"),", (also known as ",Object(c.b)("inlineCode",{parentName:"p"},"slowcat"),", to match with ",Object(c.b)("inlineCode",{parentName:"p"},"fastcat")," defined below) concatenates a list of patterns into a new pattern; each pattern in the list will maintain its original duration. For example: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ cat [sound "bd*2 sn", sound "arpy jvbass*2"]\n\nd1 $ cat [sound "bd*2 sn", sound "arpy jvbass*2", sound "drum*2"]\n\nd1 $ cat [sound "bd*2 sn", sound "jvbass*3", sound "drum*2", sound "ht mt"]\n')),Object(c.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"There is also a ",Object(c.b)("inlineCode",{parentName:"p"},"slowcat")," function, perfectly similar to ",Object(c.b)("inlineCode",{parentName:"p"},"cat"),". This function exists as a mirror of ",Object(c.b)("inlineCode",{parentName:"p"},"fastcat"),"."))),Object(c.b)("h3",{id:"fastcat"},"fastcat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: fastcat :: [Pattern a] -> Pattern a \n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"fastcat")," works like cat above, but squashes all the patterns to fit a single cycle. "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fastcat [sound "bd*2 sn", sound "arpy jvbass*2"]\n\nd1 $ fastcat [sound "bd*2 sn", sound "arpy jvbass*2", sound "drum*2"]\n\nd1 $ fastcat [sound "bd*2 sn", sound "jvbass*3", sound "drum*2", sound "ht mt"]\n')),Object(c.b)("h3",{id:"timecat"},"timeCat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: timeCat :: [(Time, Pattern a)] -> Pattern a \n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"timeCat")," is like ",Object(c.b)("inlineCode",{parentName:"p"},"fastcat")," except that you provide proportionate sizes of the patterns to each other for when they're concatenated into one cycle. The larger the value in the list, the larger relative size the pattern takes in the final loop. If all values are equal then this is equivalent to ",Object(c.b)("inlineCode",{parentName:"p"},"fastcat")," (e.g. the following two code fragments are equivalent)."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fastcat [s "bd*4", s "hh27*8", s "superpiano" # n 0]\n\nd1 $ timeCat [(1, s "bd*4"),\n              (1, s "hh27*8"),\n              (1, s "superpiano" # n 0)]\n')),Object(c.b)("h3",{id:"randcat"},"randcat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: randcat :: [Pattern a] -> Pattern a \n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"randcat")," is similar to ",Object(c.b)("inlineCode",{parentName:"p"},"cat"),", but rather than playing the given patterns in order, it picks them at random. For example: "),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ randcat [sound "bd*2 sn", sound "jvbass*3", sound "drum*2", sound "ht mt"]\n')),Object(c.b)("h2",{id:"append-family"},"Append family"),Object(c.b)("h3",{id:"append"},"append"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: append :: Pattern a -> Pattern a -> Pattern a\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"append")," combines two patterns into a new pattern, where cycles alternate between the first and second pattern:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ append (sound "bd*2 sn") (sound "arpy jvbass*2")\n')),Object(c.b)("p",null,"It has the alias ",Object(c.b)("inlineCode",{parentName:"p"},"slowAppend"),", in sympathy with ",Object(c.b)("inlineCode",{parentName:"p"},"fastAppend"),", described below."),Object(c.b)("h3",{id:"fastappend"},"fastAppend"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: fastAppend :: Pattern a -> Pattern a -> Pattern a\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"fastAppend")," works like append described above, but each pair of cycles from the two patterns are squashed to fit a single cycle."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ fastAppend (sound "bd*2 sn") (sound "arpy jvbass*2")\n')),Object(c.b)("h2",{id:"wedge"},"wedge"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: wedge :: Time -> Pattern a -> Pattern a -> Pattern a \n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"wedge")," combines two patterns by squashing them into a single cycle. It takes a ratio as the first argument. The ratio determines what percentage of the pattern cycle is taken up by the first pattern. The second pattern fills in the remainder of the pattern cycle. For example:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ wedge (1/4) (sound "bd*2 arpy*3 cp sn*2") (sound "odx [feel future]*2 hh hh")\n')),Object(c.b)("h2",{id:"brak"},"brak"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: brak :: Pattern a -> Pattern a\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"brak")," makes a pattern sound a bit like a breakbeat. It does this by every other cycle, squashing the pattern to fit half a cycle, and offsetting it by a quarter of a cycle."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ brak $ sound "[feel feel:3, hc:3 hc:2 hc:4 ho:1]"\n')),Object(c.b)("h2",{id:"flatpat"},"flatpat"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: flatpat :: Pattern [a] -> Pattern a\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"flatpat")," takes a pattern of lists and flattens it into a pattern where all the events in each list happen simultaneously. For example, the following code uses flatpat in combination with listToPat to create an alternating pattern of chords."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n (flatpat $ listToPat [[0,4,7],[(-12),(-8),(-5)]]) # s "superpiano" # sustain 2\n')),Object(c.b)("p",null,"This code is equivalent to:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n ("[0,4,7] [-12,-8,-5]") # s "superpiano" # sustain 2\n')),Object(c.b)("h2",{id:"run"},"run"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: run :: (Num a, Enum a) => Pattern a -> Pattern a\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"run")," function generates a pattern representing a cycle of numbers from ",Object(c.b)("inlineCode",{parentName:"p"},"0")," to ",Object(c.b)("inlineCode",{parentName:"p"},"n-1")," inclusive. Notably used to ",Object(c.b)("inlineCode",{parentName:"p"},"run")," through a folder of samples in order:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n (run 8) # sound "amencutup"\n')),Object(c.b)("p",null,"The first parameter to run can be given as a pattern:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n (run "<4 8 4 6>") # sound "amencutup"\n')),Object(c.b)("h2",{id:"scan"},"scan"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},"Type: scan :: (Num a, Enum a) => Pattern a -> Pattern a\n")),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"scan")," is similar to ",Object(c.b)("inlineCode",{parentName:"p"},"run"),", but starts at 1 for the first cycle, adding an additional number each cycle until it reaches ",Object(c.b)("inlineCode",{parentName:"p"},"n"),":"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-haskell"},'d1 $ n (scan 8) # sound "amencutup"\n')))}p.isMDXComponent=!0},215:function(e,a,t){"use strict";t.d(a,"a",(function(){return b})),t.d(a,"b",(function(){return m}));var n=t(0),r=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=r.a.createContext({}),p=function(e){var a=r.a.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},b=function(e){var a=p(e.components);return r.a.createElement(o.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},u=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),b=p(t),u=n,m=b["".concat(l,".").concat(u)]||b[u]||d[u]||c;return t?r.a.createElement(m,s(s({ref:a},o),{},{components:t})):r.a.createElement(m,s({ref:a},o))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,l=new Array(c);l[0]=u;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:n,l[1]=s;for(var o=2;o<c;o++)l[o]=t[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);