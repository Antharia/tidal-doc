(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{185:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(3),i=n(7),l=(n(0),n(291)),r={title:"All effects and synths",permalink:"wiki/All_effects_and_synths/",layout:"wiki"},c={unversionedId:"reference/All_effects_and_synths",id:"reference/All_effects_and_synths",isDocsHomePage:!1,title:"All effects and synths",description:"List of Tidal effects and their descriptions",source:"@site/docs/reference/All_effects_and_synths.md",slug:"/reference/All_effects_and_synths",permalink:"/docs/reference/All_effects_and_synths",editUrl:"https://github.com/tidalcycles/tidal-doc/tree/main/docs/reference/All_effects_and_synths.md",version:"current",lastUpdatedBy:"Raphael Forment",lastUpdatedAt:1621614610,sidebar:"reference",previous:{title:"All the controls",permalink:"/docs/reference/All_the_controls"},next:{title:"Category:Transitions",permalink:"/docs/reference/transitions/Category_Transitions"}},b=[{value:"Delay",id:"delay",children:[]},{value:"Leslie",id:"leslie",children:[]},{value:"Reverb",id:"reverb",children:[]},{value:"Crush",id:"crush",children:[]},{value:"Legato",id:"legato",children:[]},{value:"Tremolo",id:"tremolo",children:[]},{value:"Shape",id:"shape",children:[]},{value:"Coarse",id:"coarse",children:[]},{value:"Phaser",id:"phaser",children:[]},{value:"Vowel",id:"vowel",children:[]},{value:"Lowpass filter",id:"lowpass-filter",children:[]},{value:"Highpass filter",id:"highpass-filter",children:[]},{value:"Bandpass filter",id:"bandpass-filter",children:[]},{value:"ASR-Envelope",id:"asr-envelope",children:[]},{value:"MIDI specific parameters",id:"midi-specific-parameters",children:[]},{value:"Waveloss",id:"waveloss",children:[]},{value:"Squiz",id:"squiz",children:[]},{value:"Frequency shifter",id:"frequency-shifter",children:[]},{value:"Triode",id:"triode",children:[]},{value:"Krush",id:"krush",children:[]},{value:"Octer",id:"octer",children:[]},{value:"Ring modulator",id:"ring-modulator",children:[]},{value:"Distort",id:"distort",children:[]},{value:"Spectral delay",id:"spectral-delay",children:[]},{value:"Magnitude freeze",id:"magnitude-freeze",children:[]},{value:"Spectral comb filter",id:"spectral-comb-filter",children:[]},{value:"Bin scrambling",id:"bin-scrambling",children:[]},{value:"Magnitude smearing",id:"magnitude-smearing",children:[]},{value:"Bin shifting",id:"bin-shifting",children:[]},{value:"Spectral high pass filter",id:"spectral-high-pass-filter",children:[]},{value:"Spectral low pass filter",id:"spectral-low-pass-filter",children:[]},{value:"Spectral conformer",id:"spectral-conformer",children:[]},{value:"Spectral enhance",id:"spectral-enhance",children:[]},{value:"DJ Filter",id:"dj-filter",children:[]},{value:"Instruments",id:"instruments",children:[{value:"supermandolin",id:"supermandolin",children:[]},{value:"supergong",id:"supergong",children:[]},{value:"superpiano",id:"superpiano",children:[]},{value:"superhex",id:"superhex",children:[]},{value:"supersquare",id:"supersquare",children:[]},{value:"supersaw",id:"supersaw",children:[]},{value:"superpwm",id:"superpwm",children:[]},{value:"supercomparator",id:"supercomparator",children:[]},{value:"superchip",id:"superchip",children:[]},{value:"superfork",id:"superfork",children:[]},{value:"superhammond",id:"superhammond",children:[]},{value:"supervibe",id:"supervibe",children:[]},{value:"superhoover",id:"superhoover",children:[]},{value:"superzow",id:"superzow",children:[]},{value:"supergrind",id:"supergrind",children:[]},{value:"superprimes",id:"superprimes",children:[]},{value:"superwavemechanics",id:"superwavemechanics",children:[]},{value:"supertron",id:"supertron",children:[]},{value:"superreese",id:"superreese",children:[]},{value:"superfm",id:"superfm",children:[]}]},{value:"Default synths",id:"default-synths",children:[{value:"imp",id:"imp",children:[]},{value:"psin",id:"psin",children:[]},{value:"pmsin",id:"pmsin",children:[]},{value:"in",id:"in",children:[]},{value:"inr",id:"inr",children:[]},{value:"gabor",id:"gabor",children:[]},{value:"cyclo",id:"cyclo",children:[]}]},{value:"Drums",id:"drums",children:[{value:"superkick",id:"superkick",children:[]},{value:"super808",id:"super808",children:[]},{value:"superhat",id:"superhat",children:[]},{value:"supersnare",id:"supersnare",children:[]},{value:"superclap",id:"superclap",children:[]},{value:"soskick",id:"soskick",children:[]},{value:"soshats",id:"soshats",children:[]},{value:"sostoms",id:"sostoms",children:[]},{value:"sossnare",id:"sossnare",children:[]}]},{value:"Other sounds",id:"other-sounds",children:[{value:"supersiren",id:"supersiren",children:[]},{value:"supernoise",id:"supernoise",children:[]},{value:"superstatic",id:"superstatic",children:[]}]}],o={toc:b};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("languages",null)," ",Object(l.b)("translate",null," List of Tidal effects and their descriptions",Object(l.b)("h1",{id:"basic-effects"},"Basic effects"),Object(l.b)("h2",{id:"delay"},"Delay"),Object(l.b)("p",null,"(parameters: ","#","delay, ","#","delaytime/","#","delayt, ","#","delayfeedback/","#","delayfb)"),Object(l.b)("p",null,"Values from 0 to 1"),Object(l.b)("h2",{id:"leslie"},"Leslie"),Object(l.b)("p",null,"(parameters: ","#","leslie, ","#","lrate, ","#","lsize)"),Object(l.b)("p",null,'"Leslie" controls dry/wet. "lrate" is the modulation rate (typical\nvintage rates would be 6.7 for "fast", 0.7 for "slow"). "lsize" is the\nphysical size of the cabinet in meters, this mostly affects the Doppler\namount (pitch warble)'),Object(l.b)("h2",{id:"reverb"},"Reverb"),Object(l.b)("p",null,"(parameters: ","#","room, ","#","size, ","#","dry)"),Object(l.b)("p",null,'Thanks to Jost Muxfeld and James McCartney. Note that "size" is not room\nsize, just a depth metaphor. Values from 0 to 1'),Object(l.b)("h2",{id:"crush"},"Crush"),Object(l.b)("p",null,"(parameters: ","#","crush)"),Object(l.b)("p",null,"Bit crushing, a pattern of numbers from 1 (for drastic reduction in\nbit-depth) to 16 (for barely no reduction)."),Object(l.b)("h2",{id:"legato"},"Legato"),Object(l.b)("p",null,"(parameters: ","#","legato)"),Object(l.b)("p",null,"Legato controls the amount of overlap between two adjacent synth sounds"),Object(l.b)("h2",{id:"tremolo"},"Tremolo"),Object(l.b)("p",null,"(parameters: ","#","tremolodepth/","#","tremdp, ","#","tremolorate/","#","tremr)"),Object(l.b)("h2",{id:"shape"},"Shape"),Object(l.b)("p",null,"(parameters: ","#","shape)"),Object(l.b)("p",null,"A type of amplifier, values from 0 to 1"),Object(l.b)("h2",{id:"coarse"},"Coarse"),Object(l.b)("p",null,"(parameters: ","#","coarse)"),Object(l.b)("p",null,"Fake-resampling, a pattern of numbers for lowering the sample rate, i.e.\n1 for original 2 for half, 3 for a third and so on."),Object(l.b)("h2",{id:"phaser"},"Phaser"),Object(l.b)("p",null,"(parameters: ","#","phaserrate/","#","phasr, ","#","phaserdepth/","#","phasdp)"),Object(l.b)("h2",{id:"vowel"},"Vowel"),Object(l.b)("p",null,"(parameters: ","#","vowel)"),Object(l.b)("p",null,"Formant filter to make things sound like vowels, a pattern of either\n","`","a","`",", ","`","e","`",", ","`","i","`",", ","`","o","`"," or ","`","u","`",". Use a rest (","`","~","`",") for no effect."),Object(l.b)("h2",{id:"lowpass-filter"},"Lowpass filter"),Object(l.b)("p",null,"(","#","cutoff/","#","lpf, ","#","resonance/","#","lpq)"),Object(l.b)("p",null,"Cutoff as Hz. Resonance from 0 to 1"),Object(l.b)("h2",{id:"highpass-filter"},"Highpass filter"),Object(l.b)("p",null,"(","#","hcutoff/","#","hpf, ","#","hresonance/","#","hpq)"),Object(l.b)("p",null,"Cutoff as Hz. Resonance from 0 to 1"),Object(l.b)("h2",{id:"bandpass-filter"},"Bandpass filter"),Object(l.b)("p",null,"(","#","bandf/","#","bpf, ","#","bandq/","#","bpfq)."),Object(l.b)("p",null,"Cutoff as Hz. Resonance from 0 to 1"),Object(l.b)("h2",{id:"asr-envelope"},"ASR-Envelope"),Object(l.b)("p",null,"(","#","attack/","#","att, ","#","hold, ","#","release/","#","rel)"),Object(l.b)("p",null,"Values in seconds."),Object(l.b)("h2",{id:"midi-specific-parameters"},"MIDI specific parameters"),Object(l.b)("p",null,"(parameters: ","#","dur, ","#","modwheel, ","#","expression, ","#","sustainpedal)"),Object(l.b)("h1",{id:"extra-effects--supercollider-help-file-description"},"Extra effects + SuperCollider help file description"),Object(l.b)("h2",{id:"waveloss"},"Waveloss"),Object(l.b)("p",null,"(parameters: ","#","waveloss)\n(Calum Gunn)"),Object(l.b)("p",null,"Divides an audio stream into tiny segments, using the signal's\nzero-crossings as segment boundaries, and discards a fraction of them.\nTakes a number between 1 and 100, denoted the percentage of segments to\ndrop."),Object(l.b)("p",null,"(SuperCollider documentation for Waveloss.ar:"),Object(l.b)("p",null,"Divide an audio stream into tiny segments, using the signal's\nzero-crossings as segment boundaries, and discard a fraction of them\n(i.e. replace them with silence of the same length). The technique was\ndescribed by Trevor Wishart in a lecture."),Object(l.b)("p",null,"Parameters: the filter drops drop out of out of chunks. mode can be 1 to\ndrop chunks in a simple deterministic fashion (e.g. always dropping the\nfirst 30 out of a set of 40 segments), or 2 to drop chunks randomly but\nin an appropriate proportion.)"),Object(l.b)("h2",{id:"squiz"},"Squiz"),Object(l.b)("p",null,"(parameters: ","#","squiz)\n(Calum Gunn)"),Object(l.b)("p",null,"Reminiscent of some weird mixture of filter, ring-modulator and\npitch-shifter. Try passing multiples of 2 to it - 2, 4, 8 etc."),Object(l.b)("p",null,"(SuperCollider documentation for Squiz.ar:"),Object(l.b)("p",null,"A simplistic pitch-raising algorithm. It's not meant to sound natural;\nits sound is reminiscent of some weird mixture of filter, ring-modulator\nand pitch-shifter, depending on the input. The algorithm works by\ncutting the signal into fragments (delimited by upwards-going\nzero-crossings) and squeezing those fragments in the time domain (i.e.\nsimply playing them back faster than they came in), leaving silences\ninbetween. All the parameters apart from memlen can be modulated."),Object(l.b)("p",null,"This UGen is dedicated to Suburban Base Records. (It doesn't sound like\nthem, but was half-inspired by them.))"),Object(l.b)("h2",{id:"frequency-shifter"},"Frequency shifter"),Object(l.b)("p",null,"(parameters: ","#","fshift, ","#","fshiftnote, ","#","fshiftphase)\n(Ben Gold)"),Object(l.b)("p",null,"Total shift is sum of ","`","fshift","`"," (in Hz) and ","`","fshiftnote","`"," times the\ncurrent note frequency. ","`","fshiftphase","`"," allows control over the phase"),Object(l.b)("p",null,"(SuperCollider documentation for FreqShift.ar:"),Object(l.b)("p",null,"FreqShift implements single sideband amplitude modulation, also known as\nfrequency shifting, but not to be confused with pitch shifting.\nFrequency shifting moves all the components of a signal by a fixed\namount but does not preserve the original harmonic\nrelationships.)"),Object(l.b)("h2",{id:"triode"},"Triode"),Object(l.b)("p",null,"(parameters: ","#","triode)\n(Ben Gold)"),Object(l.b)("p",null,"Triode-like distortion, uses only the ","`","triode","`"," parameter"),Object(l.b)("h2",{id:"krush"},"Krush"),Object(l.b)("p",null,"(parameters: ","#","krush, ","#","kcutoff)\n(Ben Gold)"),Object(l.b)("p",null,'Sonic Pi\'s krush modified a bit so krush "0" is the same as dry signal\nuses ',"`","krush","`"," and ","`","kcutoff","`"," as parameters"),Object(l.b)("h2",{id:"octer"},"Octer"),Object(l.b)("p",null,"(parameters: ","#","octer, ","#","octersub, ","#","octersubsub)\n(Ben Gold)"),Object(l.b)("p",null,"Sonic Pi's octaver uses ","`","octer","`"," for octave harmonics, ","`","octersub","`"," for\nhalf-frequency harmonics, and ","`","octersubsub","`"," for quarter-frequency\nharmonics."),Object(l.b)("h2",{id:"ring-modulator"},"Ring modulator"),Object(l.b)("p",null,"(parameters: ","#","ring, ","#","ringf, ","#","ringdf)\n(Ben Gold)"),Object(l.b)("p",null,"Ring modulation with ","`","ring","`"," (modulation amount), ","`","ringf","`"," (modulation\nfrequency), and ","`","ringdf","`"," (slide in modulation frequency)"),Object(l.b)("h2",{id:"distort"},"Distort"),Object(l.b)("p",null,"(parameters: ","#","distort)\n(Ben Gold)"),Object(l.b)("p",null,"A crunchy distortion with a lot of high harmonics, the only parameter is\n","`","distort"),Object(l.b)("h2",{id:"spectral-delay"},"Spectral delay"),Object(l.b)("p",null,"(parameters: ","#","xsdelay, ","#","tsdelay)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"(.....)"),Object(l.b)("h2",{id:"magnitude-freeze"},"Magnitude freeze"),Object(l.b)("p",null,"(parameters: ","#","freeze)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Accepts integers: 1 freezes the audio, 0 doesn't."),Object(l.b)("p",null,"(SuperCollider documentation for PV_Freeze:"),Object(l.b)("p",null,"Freezes magnitudes at current levels when freeze ",">"," 0, and advances\nphase according to difference between frames to try and maintain currect\nspectral quality.)"),Object(l.b)("h2",{id:"spectral-comb-filter"},"Spectral comb filter"),Object(l.b)("p",null,"(parameters: ","#","comb)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Number of teeth and width of the comb are all controlled using one\nfloating point number"),Object(l.b)("p",null,"(SuperCollider documentation for PV_RectComb:"),Object(l.b)("p",null,"Makes a series of gaps in a spectrum)"),Object(l.b)("h2",{id:"bin-scrambling"},"Bin scrambling"),Object(l.b)("p",null,"(parameters: ","#","scram)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Accepts floats to control the width and placement of the scrambling in\nthe spectrum"),Object(l.b)("p",null,"(SuperCollider documentation for PV_BinScramble:"),Object(l.b)("p",null,"Randomizes the order of the bins. The trigger will select a new random\nordering.)"),Object(l.b)("h2",{id:"magnitude-smearing"},"Magnitude smearing"),Object(l.b)("p",null,"(parameters: ","#","smear)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Accepts floats to determine the amount of smearing."),Object(l.b)("p",null,"(SuperCollider documentation for PV_MagSmear:"),Object(l.b)("p",null,"Average a bin's magnitude with its neighbors.)"),Object(l.b)("h2",{id:"bin-shifting"},"Bin shifting"),Object(l.b)("p",null,"(parameters: ","#","binshift)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Both the stretching and shifting of bins are controlled by supplying\nthis parameter with floats."),Object(l.b)("p",null,"(SuperCollider documentation for: PV_BinShift:"),Object(l.b)("p",null,"Shift and scale the positions of the bins. Can be used as a very crude\nfrequency shifter/scaler.)"),Object(l.b)("h2",{id:"spectral-high-pass-filter"},"Spectral high pass filter"),Object(l.b)("p",null,"(parameters: ","#","hbrick)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Accepts floats in values ranging from 0.0 to 1.0"),Object(l.b)("p",null,"(SuperCollider documentation for PV_BrickWall: Clears bins above\nor below a cutoff point.)"),Object(l.b)("h2",{id:"spectral-low-pass-filter"},"Spectral low pass filter"),Object(l.b)("p",null,"(parameters: ","#","lbrick)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"Accepts floats in values ranging from 0.0 to 1.0"),Object(l.b)("p",null,"(SuperCollider documentation for PV_BrickWall: Clears bins above\nor below a cutoff point.)"),Object(l.b)("h2",{id:"spectral-conformer"},"Spectral conformer"),Object(l.b)("p",null,"(parameters: ","#","real, ","#","imag)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"(No Description)"),Object(l.b)("p",null,"(SuperCollider documentation for PV_ConformalMap: Applies the\nconformal mapping z \u2192 (z - a) / (1 - za","*",") to the phase vocoder bins z\nwith a given by the real and imag inputs to the UGen. Makes a\ntransformation of the complex plane so the output is full of phase\nvocoder artifacts but may be musically fun. Usually keep ","|","a","|"," \\< 1 but\nyou can of course try bigger values to make it really noisy. a = 0\nshould give back the input mostly unperturbed. See\n",Object(l.b)("a",{parentName:"p",href:"http://mathworld.wolfram.com/ConformalMapping.html"},"http://mathworld.wolfram.com/ConformalMapping.html")," )"),Object(l.b)("h2",{id:"spectral-enhance"},"Spectral enhance"),Object(l.b)("p",null,"(parameters: ","#","enhance)\n(Mads Kjeldgaard)"),Object(l.b)("p",null,"(No description)"),Object(l.b)("h2",{id:"dj-filter"},"DJ Filter"),Object(l.b)("p",null,"(parameters: ","#","djf)\n(Alex McLean)"),Object(l.b)("p",null,"DJ filter, a low pass filter for the first half of the range, and a high\npass for the rest."),Object(l.b)("h1",{id:"superdirt-synths"},"SuperDirt synths"),Object(l.b)("p",null,"Default values are in parentheses. Some undocumented parameters are\nincluded without descriptions."),Object(l.b)("p",null,"In all synths,",Object(l.b)("inlineCode",{parentName:"p"},"sustain")," (default 1) affects the overall envelope\ntimescale. The parameters ",Object(l.b)("inlineCode",{parentName:"p"},"pan")," and ",Object(l.b)("inlineCode",{parentName:"p"},"freq")," can also be set in all\nsynths. The default value for ",Object(l.b)("inlineCode",{parentName:"p"},"freq")," is usually 440 \u2013 in synths where\nit\u2019s not, ",Object(l.b)("inlineCode",{parentName:"p"},"freq")," and its default value for that synth are mentioned in\nits parameter list below."),Object(l.b)("h2",{id:"instruments"},"Instruments"),Object(l.b)("h3",{id:"supermandolin"},"supermandolin"),Object(l.b)("p",null,"Physical modeling of a vibrating string, using a delay line (CombL)\nexcited by an intial pulse (Impulse). To make it a bit richer, I\u2019ve\ncombined two slightly detuned delay lines."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sustain")," (1) changes the envelope timescale"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for a pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0.2)")),Object(l.b)("h3",{id:"supergong"},"supergong"),Object(l.b)("p",null,"An example of additive synthesis, building up a gong-like noise from a\nsum of sine-wave harmonics. Notice how the envelope timescale and\namplitude can be scaled as a function of the harmonic frequency."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0) provides something like a tone knob"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (1) adjusts how the harmonics decay"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for pitch glide")),Object(l.b)("p",null,"For a demo, try\n",Object(l.b)("inlineCode",{parentName:"p"},'d1 $ n (slow 2 $ fmap (*7) $ run 8) # s "supergong" # decay "[1 0.2]/4" # voice "[0.5 0]/8"')),Object(l.b)("h3",{id:"superpiano"},"superpiano"),Object(l.b)("p",null,"Hooking into a nice synth piano already in SuperCollider"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"velocity")," affects how hard the keys are pressed"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sustain")," controls envelope and decay time"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0.1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"muffle")," (1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"stereo")," (0.2)")),Object(l.b)("h3",{id:"superhex"},"superhex"),Object(l.b)("p",null,"Waveguide mesh, hexagonal drum-like membrane"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("p",null,"SuperCollider documentation for MembraneHexagon.ar:\nMembraneCircle and MembraneHexagon are rather similar, being triangular\nwaveguide meshes of a drum-like membrane. You input some excitation,\nsuch as a pulse of noise, and can adjust the tension and loss while it\nplays. They\u2019re named after the shape made out of triangular meshes.\nObviously you can\u2019t make a circle out of triangles, but it tries. At the\nmoment MembraneCircle is a bit bigger than MembraneHexagon, using more\nwaveguides and therefore more CPU.)"),Object(l.b)("h3",{id:"supersquare"},"supersquare"),Object(l.b)("p",null,"A moog-inspired square-wave synth; variable-width pulses with filter\nfrequency modulated by an LFO"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," controls the pulse width (exactly zero or one will make no\nsound)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semitone")," (12) how far off in pitch the secondary oscillator is\n(need not be integer)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (0.2) filter resonance"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lfo")," (1) how much the LFO affects the filter frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) LFO rate"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (1) filter frequency scaling multiplier, the frequency\nitself follows the pitch set by \u201cn\u201d")),Object(l.b)("h3",{id:"supersaw"},"supersaw"),Object(l.b)("p",null,"A moog-inspired sawtooth synth; slightly detuned saws with triangle\nharmonics, filter frequency modulated by LFO"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0.5) controls a relative phase and detune amount"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semitone")," (12) how far off in pitch the secondary oscillator is\n(need not be integer)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (0.2) filter resonance"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lfo")," (1) how much the LFO affects the filter frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) LFO rate"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (1) filter frequency scaling multiplier, the frequency\nitself follows the pitch set by \u201cn\u201d")),Object(l.b)("h3",{id:"superpwm"},"superpwm"),Object(l.b)("p",null,"A moog-inspired PWM synth; pulses multiplied by phase-shifted pulses,\ndouble filtering with an envelope on the second"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," controls the phase shift rate"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semitone")," (12) how far off in pitch the secondary oscillator is\n(need not be integer)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (0.2) filter resonance"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lfo")," (1) how much the LFO affects the filter frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) LFO rate"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (1) filter frequency scaling multiplier, the frequency\nitself follows the pitch set by \u201cn\u201d")),Object(l.b)("h3",{id:"supercomparator"},"supercomparator"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0.5) scales the comparator frequencies, higher values will\nsound \u201cbreathier\u201d"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (0.5) filter resonance"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lfo")," (1) how much the LFO affects the filter frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) LFO rate"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (1) filter frequency scaling multiplier, the frequency\nitself follows the pitch set by \u201cn\u201d")),Object(l.b)("h3",{id:"superchip"},"superchip"),Object(l.b)("p",null,"Uses the Atari ST emulation UGen with 3 oscillators"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"slide")," (0) for a linear frequency glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) repeats the above glide \u201cn\u201d times (can be fractional or\nnegative)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for an overall glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch2")," (2) control the ratio of harmonics"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch3")," (3) control the ratio of harmonics"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0) causes variations in the levels of the 3 oscillators")),Object(l.b)("h3",{id:"superfork"},"superfork"),Object(l.b)("p",null,"Tuning fork from Ben Gold\u2019s experimentation and from \u201cOn the acoustics\nof tuning forks\u201d, Rossing Russell and Brown"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("h3",{id:"superhammond"},"superhammond"),Object(l.b)("p",null,"Hammond B3 sim. Frequency adjustments courtesy of ",Object(l.b)("a",{parentName:"p",href:"https://electricdruid.net"},"Tom\nWiltshire"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"perc"),", ",Object(l.b)("inlineCode",{parentName:"li"},"percf")," and ",Object(l.b)("inlineCode",{parentName:"li"},"decay")," are an attempt at the percussion, no\nidea if it sounds at all reasonable. Vintage Hammonds had ",Object(l.b)("inlineCode",{parentName:"li"},"percf")," as\n2 or 3 (switchable), two ",Object(l.b)("inlineCode",{parentName:"li"},"perc")," levels (maybe roughly 0.7 and 1.2?),\nand two ",Object(l.b)("inlineCode",{parentName:"li"},"decay")," options (roughly 0 and maybe 1ish?)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"vibrato"),", ",Object(l.b)("inlineCode",{parentName:"li"},"vrate"),", ",Object(l.b)("inlineCode",{parentName:"li"},"perc"),", ",Object(l.b)("inlineCode",{parentName:"li"},"percf")," are all new parameters you\u2019ll\nneed to define in Tidal if you want to change them")),Object(l.b)("p",null,"Voices are drawbar presets:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"0: bass violin 16\u2019"),Object(l.b)("li",{parentName:"ul"},"1: tibia 8\u2019"),Object(l.b)("li",{parentName:"ul"},"2: bassoon 8\u2019"),Object(l.b)("li",{parentName:"ul"},"3: french trumpet 8\u2019"),Object(l.b)("li",{parentName:"ul"},"4: string ensemble"),Object(l.b)("li",{parentName:"ul"},"5: Blues"),Object(l.b)("li",{parentName:"ul"},"6: Jazz 1"),Object(l.b)("li",{parentName:"ul"},"7: Full Shout"),Object(l.b)("li",{parentName:"ul"},"8: Bro\u2019 Jack"),Object(l.b)("li",{parentName:"ul"},"9: Jazz 2")),Object(l.b)("h3",{id:"supervibe"},"supervibe"),Object(l.b)("p",null,"Vibraphone simulation, adapted with some help from Kevin Larke\u2019s thesis\nReal Time Vibraphone Pitch and Timbre Classification"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0) use larger values to damp higher harmonics"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"velocity")," (1) higher velocity will brighten the sound a bit"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for a linear pitch bend"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"modamp")," (1) amplitude of the tremolo (0-2 is OK)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"modfreq")," (7) frequency of the tremolo"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0) adjusts a high harmonic to give the sound a different\ncharacter")),Object(l.b)("h3",{id:"superhoover"},"superhoover"),Object(l.b)("p",null,"Hoover, adapted from ",Object(l.b)("a",{parentName:"p",href:"http://superdupercollider.blogspot.com/2009/06/more-dominator-deconstruction.html"},"Wouter Snoei\u2019s\nimplementation"),"."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"slide")," (0) for the amount of initial pitch glide, positive slides\nup in pitch, negative slides down"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0) for a different envelope shape"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for constant pitch glide")),Object(l.b)("h3",{id:"superzow"},"superzow"),Object(l.b)("p",null,"Phased saws"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (0) for envelope shaping"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for pitch bend"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"slide")," (1) how fast it moves through the phase"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (1) for oscillator detuning")),Object(l.b)("h3",{id:"supergrind"},"supergrind"),Object(l.b)("p",null,"From synthdef.art fragment: 2018-08-16"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0) in Hz, but even small values are quite noticeable"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0) changes harmonics"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) is the impulse trigger rate")),Object(l.b)("h3",{id:"superprimes"},"superprimes"),Object(l.b)("p",null,"From synthdef.art ","#","nightofprimes"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0) can be fractional"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0) does some subtle shaping and reverb changing"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (0) is the impulse trigger rate")),Object(l.b)("h3",{id:"superwavemechanics"},"superwavemechanics"),Object(l.b)("p",null,"From synthdef.art ","#","wavemechanics"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for pitch glide"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0) for pitch randomization"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0) to color/whiten the noise"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (0) affects reverberation")),Object(l.b)("h3",{id:"supertron"},"supertron"),Object(l.b)("p",null,"Feedback PWM"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0)")),Object(l.b)("p",null,"Try ",Object(l.b)("inlineCode",{parentName:"p"},'d1 $ s "supertron" # octave 3 # accelerate "0.2"')),Object(l.b)("h3",{id:"superreese"},"superreese"),Object(l.b)("p",null,"Vaguely Reese-like synth"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (0)")),Object(l.b)("h3",{id:"superfm"},"superfm"),Object(l.b)("p",null,"6-op FM synth (DX7-like). Works a bit different from the original DX7.\nInstead of algorithms, you set the amount of modulation every operator\nreceives from other operators and itself (feedback), virtually providing\nan endless number of possible combinations (algorithms)."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," is the preset number: ",Object(l.b)("inlineCode",{parentName:"li"},"0")," is user-defined; ",Object(l.b)("inlineCode",{parentName:"li"},"1-5")," are\nrandomly generated presets"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lfofreq")," is the overall pitch modulation frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"lfodepth")," is the overall pitch modulation amplitude")),Object(l.b)("p",null,"Each operator responds to"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"amp")," (operator volume - becomes carrier)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ratio")," (frequency ratio)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune")," (in Hz)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"eglevel")," (1-4) (4 envelope generator levels)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"egrate")," (1-4) (4 envelope generator rates)")),Object(l.b)("p",null,"The syntax for operator arguments is\n",Object(l.b)("inlineCode",{parentName:"p"},"<argumentName + opIndex>[modulatorIndex | egIndex]"),". For example:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"amp1 1")," (op1 as carrier with full volume)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ratio2 2.3")," (op2 frequency ratio)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mod11 0.5")," (op1 feedback)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"mod12 0.78")," (op1 modulation amount by op2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"detune1 0.2")," (op1 detune)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"eglevel12 0.1")," (op1 EG level2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"egrate11 0.01")," (op1 EG rate1) \u2013 WARNING: higher values go FASTER!")),Object(l.b)("h2",{id:"default-synths"},"Default synths"),Object(l.b)("h3",{id:"imp"},"imp"),Object(l.b)("p",null,"Modulated band limited impulse"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("h3",{id:"psin"},"psin"),Object(l.b)("p",null,"Modulated phase mod sines"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("h3",{id:"pmsin"},"pmsin"),Object(l.b)("p",null,"Cursor modulated phase mod sines"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("h3",{id:"in"},"in"),Object(l.b)("p",null,"Live audio input"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"in"))),Object(l.b)("h3",{id:"inr"},"inr"),Object(l.b)("p",null,"Pitch shifted live audio input"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("h3",{id:"gabor"},"gabor"),Object(l.b)("p",null,"Gabor grain"),Object(l.b)("h3",{id:"cyclo"},"cyclo"),Object(l.b)("p",null,"Shepard on a cycle"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0)")),Object(l.b)("h2",{id:"drums"},"Drums"),Object(l.b)("h3",{id:"superkick"},"superkick"),Object(l.b)("p",null,"Kick Drum using ",Object(l.b)("a",{parentName:"p",href:"http://blog.rumblesan.com/post/53271713518/drum-sounds-in-supercollider-part-1"},"Rumble-San\u2019s\nimplementation"),"\nas a starting point"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"n")," controls the kick frequency in a nonstandard way"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) sweeps the click filter frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (1) affects the click frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (1) changes the click duration relative to the overall\ntimescale")),Object(l.b)("h3",{id:"super808"},"super808"),Object(l.b)("p",null,"A vaguely 808-ish kick drum"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"n")," controls the chirp frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) controls the filter sweep speed"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0) sets the sinewave feedback")),Object(l.b)("h3",{id:"superhat"},"superhat"),Object(l.b)("p",null,"Hi-hat using ",Object(l.b)("a",{parentName:"p",href:"http://blog.rumblesan.com/post/53271713518/drum-sounds-in-supercollider-part-1"},"Rumble-San\u2019s\nimplementation"),"\nas a starting point"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"n")," provides some variation on the frequency in a weird way"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) sweeps the filter")),Object(l.b)("h3",{id:"supersnare"},"supersnare"),Object(l.b)("p",null,"Snare drum using ",Object(l.b)("a",{parentName:"p",href:"http://blog.rumblesan.com/post/53271713518/drum-sounds-in-supercollider-part-1"},"Rumble-San\u2019s\nimplementation"),"\nas a starting point"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"n")," for some variation on frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"decay")," (1) for scaling noise duration relative to tonal part"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," (0) for tonal glide")),Object(l.b)("h3",{id:"superclap"},"superclap"),Object(l.b)("p",null,"Hand clap using ",Object(l.b)("a",{parentName:"p",href:"http://blog.rumblesan.com/post/53271713518/drum-sounds-in-supercollider-part-1"},"Rumble-San\u2019s\nimplementation"),"\nas a starting point"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"n")," (?) changes how spread is calculated"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"delay")," (1) controls the echo delay"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"rate")," (1) affects the decay time"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (1) scales the bandpass frequency")),Object(l.b)("h3",{id:"soskick"},"soskick"),Object(l.b)("p",null,"Kick drum synth. Increase pitch1 and voice for interesting electronic\npercussion."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"midinote")," \u2013 controls the root note of the kick (the source comments\nmention this, but the\n",Object(l.b)("a",{parentName:"li",href:"https://github.com/musikinformatik/SuperDirt/blob/7589ccc3f5b780f07de869bb976677cf5af2a8e8/library/default-synths-extra.scd#L653"},"function"),"\ndoesn\u2019t have this parameter at all)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (0) controls modulation frequency in Hz (min: 0, max:\nSampleRate.ir / 2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (1) controls modulation input phase in radians (min: 0, max:\nyour sanity)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch2")," (0) controls WhiteNoise amplitude (min: 0, max: 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"speed")," (0.3) controls WhiteNoise sweep (min: 0, max: 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"freq")," (65)")),Object(l.b)("h3",{id:"soshats"},"soshats"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (1) bandpass filter resonance value (min: 0, max: 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (238.5) oscillator modulation in radians (min: 0, max:\nSampleRate.ir / 2)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sustain")," (0.5)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"freq")," (220)")),Object(l.b)("h3",{id:"sostoms"},"sostoms"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0.5) controls modulation input phase in radians (min: 0,\nmax: your sanity)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"sustain")," (0.5)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"freq")," (261.626)")),Object(l.b)("h3",{id:"sossnare"},"sossnare"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," (0.385) controls modulation input phase in radians (min: 0,\nmax: your sanity)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"semitone")," (0.452) modulation frequency in semitones of fundamental"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," (2000) resonance filter frequency (Hz)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," (0.1) resonance of bandpass and resonz filters (min: 0,\nmax: 1)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"freq")," (405)")),Object(l.b)("h2",{id:"other-sounds"},"Other sounds"),Object(l.b)("h3",{id:"supersiren"},"supersiren"),Object(l.b)("p",null,"A controllable synth siren, defaults to 1 second, draw it out with\n",Object(l.b)("inlineCode",{parentName:"p"},"sustain")),Object(l.b)("h3",{id:"supernoise"},"supernoise"),Object(l.b)("p",null,"Digital noise in several flavors with a bandpass filter"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"voice")," at 0 is a digital noise for which \u201cn\u201d controls rate, at 1 is\nBrown+White noise for which \u201cn\u201d controls knee frequency"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"accelerate")," causes glide in n, \u201crate\u201d will cause it to repeat"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"pitch1")," scales the bandpass frequency (which tracks \u201cn\u201d)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"slide")," works like accelerate on the bandpass"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"resonance")," is the filter resonance")),Object(l.b)("h3",{id:"superstatic"},"superstatic"),Object(l.b)("p",null,"Impulse noise with a fadein/out")))}s.isMDXComponent=!0},291:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=i.a.createContext({}),s=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,o=b(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,m=p["".concat(r,".").concat(d)]||p[d]||u[d]||l;return n?i.a.createElement(m,c(c({ref:t},o),{},{components:n})):i.a.createElement(m,c({ref:t},o))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=d;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var o=2;o<l;o++)r[o]=n[o];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);